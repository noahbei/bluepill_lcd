
bluepill_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08004734  08004734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f94  08004f94  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004f94  08004f94  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f94  08004f94  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004f9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000064  08005000  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005000  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d410  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a3  00000000  00000000  0001349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00015940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019048  00000000  00000000  00016860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010d63  00000000  00000000  0002f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000916ef  00000000  00000000  0004060b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d1cfa  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000b93  00000000  00000000  000d1d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043e8  00000000  00000000  000d28d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d6cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800471c 	.word	0x0800471c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800471c 	.word	0x0800471c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	@ 0x24
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff89 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8b7 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa47 	bl	80005ec <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f951 	bl	8000404 <MX_RTC_Init>
  MX_SPI1_Init();
 8000162:	f000 f96b 	bl	800043c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000166:	f000 f90f 	bl	8000388 <MX_ADC1_Init>
  MX_TIM1_Init();
 800016a:	f000 f99f 	bl	80004ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800016e:	f000 fbc7 	bl	8000900 <ST7735_Init>
  ST7735_FillScreenFast(ST7735_BLACK);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 fdae 	bl	8000cd4 <ST7735_FillScreenFast>

  HAL_ADC_Start(&hadc1);
 8000178:	4847      	ldr	r0, [pc, #284]	@ (8000298 <main+0x14c>)
 800017a:	f001 f8d3 	bl	8001324 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800017e:	210c      	movs	r1, #12
 8000180:	4846      	ldr	r0, [pc, #280]	@ (800029c <main+0x150>)
 8000182:	f003 f877 	bl	8003274 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000186:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800018a:	4843      	ldr	r0, [pc, #268]	@ (8000298 <main+0x14c>)
 800018c:	f001 f978 	bl	8001480 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 8000190:	4841      	ldr	r0, [pc, #260]	@ (8000298 <main+0x14c>)
 8000192:	f001 fa7b 	bl	800168c <HAL_ADC_GetValue>
 8000196:	4603      	mov	r3, r0
 8000198:	461a      	mov	r2, r3
 800019a:	4b41      	ldr	r3, [pc, #260]	@ (80002a0 <main+0x154>)
 800019c:	601a      	str	r2, [r3, #0]


	  // Map ADC value (0-4095) to PWM duty cycle (0-180 degrees)
	  uint32_t pulse_width = (readValue * (2000 - 500) / 4095) + 500;
 800019e:	4b40      	ldr	r3, [pc, #256]	@ (80002a0 <main+0x154>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80001a6:	fb02 f303 	mul.w	r3, r2, r3
 80001aa:	4a3e      	ldr	r2, [pc, #248]	@ (80002a4 <main+0x158>)
 80001ac:	fb82 1203 	smull	r1, r2, r2, r3
 80001b0:	441a      	add	r2, r3
 80001b2:	12d2      	asrs	r2, r2, #11
 80001b4:	17db      	asrs	r3, r3, #31
 80001b6:	1ad3      	subs	r3, r2, r3
 80001b8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80001bc:	60fb      	str	r3, [r7, #12]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse_width);
 80001be:	4b37      	ldr	r3, [pc, #220]	@ (800029c <main+0x150>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	641a      	str	r2, [r3, #64]	@ 0x40

	  //write value to screen
	  char buffer[10];
	  snprintf(buffer, sizeof(buffer), "%05d", readValue);
 80001c6:	4b36      	ldr	r3, [pc, #216]	@ (80002a0 <main+0x154>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4638      	mov	r0, r7
 80001cc:	4a36      	ldr	r2, [pc, #216]	@ (80002a8 <main+0x15c>)
 80001ce:	210a      	movs	r1, #10
 80001d0:	f003 fe8e 	bl	8003ef0 <sniprintf>
	  ST7735_WriteString(32, 32, buffer, Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80001d4:	4b35      	ldr	r3, [pc, #212]	@ (80002ac <main+0x160>)
 80001d6:	4639      	mov	r1, r7
 80001d8:	2200      	movs	r2, #0
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	9200      	str	r2, [sp, #0]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	460a      	mov	r2, r1
 80001ea:	2120      	movs	r1, #32
 80001ec:	2020      	movs	r0, #32
 80001ee:	f000 fc4c 	bl	8000a8a <ST7735_WriteString>

	  //draw bar to screen
	  x = 10;
 80001f2:	4b2f      	ldr	r3, [pc, #188]	@ (80002b0 <main+0x164>)
 80001f4:	220a      	movs	r2, #10
 80001f6:	801a      	strh	r2, [r3, #0]
	  y = 64;
 80001f8:	4b2e      	ldr	r3, [pc, #184]	@ (80002b4 <main+0x168>)
 80001fa:	2240      	movs	r2, #64	@ 0x40
 80001fc:	801a      	strh	r2, [r3, #0]
	  h = 10;
 80001fe:	4b2e      	ldr	r3, [pc, #184]	@ (80002b8 <main+0x16c>)
 8000200:	220a      	movs	r2, #10
 8000202:	801a      	strh	r2, [r3, #0]
	  w = (readValue * 108) / 4095;
 8000204:	4b26      	ldr	r3, [pc, #152]	@ (80002a0 <main+0x154>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	226c      	movs	r2, #108	@ 0x6c
 800020a:	fb02 f303 	mul.w	r3, r2, r3
 800020e:	4a25      	ldr	r2, [pc, #148]	@ (80002a4 <main+0x158>)
 8000210:	fb82 1203 	smull	r1, r2, r2, r3
 8000214:	441a      	add	r2, r3
 8000216:	12d2      	asrs	r2, r2, #11
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad3      	subs	r3, r2, r3
 800021c:	b29a      	uxth	r2, r3
 800021e:	4b27      	ldr	r3, [pc, #156]	@ (80002bc <main+0x170>)
 8000220:	801a      	strh	r2, [r3, #0]
	  w2 = 15;
 8000222:	4b27      	ldr	r3, [pc, #156]	@ (80002c0 <main+0x174>)
 8000224:	220f      	movs	r2, #15
 8000226:	801a      	strh	r2, [r3, #0]
	  w3 = 80;
 8000228:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <main+0x178>)
 800022a:	2250      	movs	r2, #80	@ 0x50
 800022c:	801a      	strh	r2, [r3, #0]
	  ST7735_DrawRectangle(x - 1, y - 1, 109, h + 2, ST7735_WHITE);
 800022e:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <main+0x164>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	3b01      	subs	r3, #1
 8000234:	b298      	uxth	r0, r3
 8000236:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <main+0x168>)
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	b299      	uxth	r1, r3
 800023e:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <main+0x16c>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	3302      	adds	r3, #2
 8000244:	b29b      	uxth	r3, r3
 8000246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800024a:	9200      	str	r2, [sp, #0]
 800024c:	226d      	movs	r2, #109	@ 0x6d
 800024e:	f000 fc66 	bl	8000b1e <ST7735_DrawRectangle>
	  ST7735_FillRectangleFast(x, y, w, h, ST7735_CYAN);
 8000252:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <main+0x164>)
 8000254:	8818      	ldrh	r0, [r3, #0]
 8000256:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <main+0x168>)
 8000258:	8819      	ldrh	r1, [r3, #0]
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <main+0x170>)
 800025c:	881a      	ldrh	r2, [r3, #0]
 800025e:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <main+0x16c>)
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8000266:	9400      	str	r4, [sp, #0]
 8000268:	f000 fcb0 	bl	8000bcc <ST7735_FillRectangleFast>
	  ST7735_FillRectangleFast(w + w2, y, w3, h, ST7735_BLACK);
 800026c:	4b13      	ldr	r3, [pc, #76]	@ (80002bc <main+0x170>)
 800026e:	881a      	ldrh	r2, [r3, #0]
 8000270:	4b13      	ldr	r3, [pc, #76]	@ (80002c0 <main+0x174>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	4413      	add	r3, r2
 8000276:	b298      	uxth	r0, r3
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x168>)
 800027a:	8819      	ldrh	r1, [r3, #0]
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <main+0x178>)
 800027e:	881a      	ldrh	r2, [r3, #0]
 8000280:	4b0d      	ldr	r3, [pc, #52]	@ (80002b8 <main+0x16c>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	2400      	movs	r4, #0
 8000286:	9400      	str	r4, [sp, #0]
 8000288:	f000 fca0 	bl	8000bcc <ST7735_FillRectangleFast>

	  HAL_Delay(50);
 800028c:	2032      	movs	r0, #50	@ 0x32
 800028e:	f000 ff4d 	bl	800112c <HAL_Delay>
  {
 8000292:	bf00      	nop
 8000294:	e777      	b.n	8000186 <main+0x3a>
 8000296:	bf00      	nop
 8000298:	20000080 	.word	0x20000080
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	2000016c 	.word	0x2000016c
 80002a4:	80080081 	.word	0x80080081
 80002a8:	08004734 	.word	0x08004734
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000170 	.word	0x20000170
 80002b4:	20000172 	.word	0x20000172
 80002b8:	20000174 	.word	0x20000174
 80002bc:	20000176 	.word	0x20000176
 80002c0:	20000178 	.word	0x20000178
 80002c4:	2000017a 	.word	0x2000017a

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fe3e 	bl	8003f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002f8:	2305      	movs	r3, #5
 80002fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000316:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fe20 	bl	8001f68 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800032e:	f000 f9fb 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f002 f88c 	bl	800246c <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800035a:	f000 f9e5 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800035e:	2303      	movs	r3, #3
 8000360:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000366:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800036c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f002 f9f5 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800037c:	f000 f9d4 	bl	8000728 <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	@ 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_ADC1_Init+0x74>)
 800039a:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <MX_ADC1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003b2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003c6:	f000 fed5 	bl	8001174 <HAL_ADC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003d0:	f000 f9aa 	bl	8000728 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d8:	2301      	movs	r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_ADC1_Init+0x74>)
 80003e6:	f001 f95d 	bl	80016a4 <HAL_ADC_ConfigChannel>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003f0:	f000 f99a 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000080 	.word	0x20000080
 8000400:	40012400 	.word	0x40012400

08000404 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000408:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <MX_RTC_Init+0x30>)
 800040a:	4a0b      	ldr	r2, [pc, #44]	@ (8000438 <MX_RTC_Init+0x34>)
 800040c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_RTC_Init+0x30>)
 8000410:	f04f 32ff 	mov.w	r2, #4294967295
 8000414:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_RTC_Init+0x30>)
 8000418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800041c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_RTC_Init+0x30>)
 8000420:	f002 fb0a 	bl	8002a38 <HAL_RTC_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800042a:	f000 f97d 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000b0 	.word	0x200000b0
 8000438:	40002800 	.word	0x40002800

0800043c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000442:	4a19      	ldr	r2, [pc, #100]	@ (80004a8 <MX_SPI1_Init+0x6c>)
 8000444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800044c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000450:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000454:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_SPI1_Init+0x68>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_SPI1_Init+0x68>)
 800046a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800046e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000472:	2208      	movs	r2, #8
 8000474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_SPI1_Init+0x68>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_SPI1_Init+0x68>)
 800048a:	220a      	movs	r2, #10
 800048c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_SPI1_Init+0x68>)
 8000490:	f002 fbdb 	bl	8002c4a <HAL_SPI_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800049a:	f000 f945 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000c4 	.word	0x200000c4
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b096      	sub	sp, #88	@ 0x58
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2220      	movs	r2, #32
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 fd37 	bl	8003f58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ea:	4b3e      	ldr	r3, [pc, #248]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80004ec:	4a3e      	ldr	r2, [pc, #248]	@ (80005e8 <MX_TIM1_Init+0x13c>)
 80004ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 80004f0:	4b3c      	ldr	r3, [pc, #240]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80004f2:	2247      	movs	r2, #71	@ 0x47
 80004f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b3b      	ldr	r3, [pc, #236]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 80004fc:	4b39      	ldr	r3, [pc, #228]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80004fe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000502:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800050a:	4b36      	ldr	r3, [pc, #216]	@ (80005e4 <MX_TIM1_Init+0x138>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000510:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000516:	4833      	ldr	r0, [pc, #204]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000518:	f002 fe04 	bl	8003124 <HAL_TIM_Base_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000522:	f000 f901 	bl	8000728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800052a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800052c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000530:	4619      	mov	r1, r3
 8000532:	482c      	ldr	r0, [pc, #176]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000534:	f003 f802 	bl	800353c <HAL_TIM_ConfigClockSource>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800053e:	f000 f8f3 	bl	8000728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000542:	4828      	ldr	r0, [pc, #160]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000544:	f002 fe3d 	bl	80031c2 <HAL_TIM_PWM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800054e:	f000 f8eb 	bl	8000728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800055e:	4619      	mov	r1, r3
 8000560:	4820      	ldr	r0, [pc, #128]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000562:	f003 fb57 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800056c:	f000 f8dc 	bl	8000728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	2360      	movs	r3, #96	@ 0x60
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 8000574:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057a:	2300      	movs	r3, #0
 800057c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800058a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800058e:	220c      	movs	r2, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4814      	ldr	r0, [pc, #80]	@ (80005e4 <MX_TIM1_Init+0x138>)
 8000594:	f002 ff10 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800059e:	f000 f8c3 	bl	8000728 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80005c6:	f003 fb83 	bl	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005d0:	f000 f8aa 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <MX_TIM1_Init+0x138>)
 80005d6:	f000 fc7d 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	@ 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000011c 	.word	0x2000011c
 80005e8:	40012c00 	.word	0x40012c00

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a37      	ldr	r2, [pc, #220]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b35      	ldr	r3, [pc, #212]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a31      	ldr	r2, [pc, #196]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a2b      	ldr	r2, [pc, #172]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a25      	ldr	r2, [pc, #148]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_GPIO_Init+0xf8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2102      	movs	r1, #2
 8000664:	4820      	ldr	r0, [pc, #128]	@ (80006e8 <MX_GPIO_Init+0xfc>)
 8000666:	f001 fc43 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <MX_GPIO_Init+0x100>)
 8000672:	f001 fc3d 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4816      	ldr	r0, [pc, #88]	@ (80006e8 <MX_GPIO_Init+0xfc>)
 800068e:	f001 faab 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_GPIO_Init+0x104>)
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <MX_GPIO_Init+0x100>)
 80006a8:	f001 fa9e 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9;
 80006ac:	f44f 730a 	mov.w	r3, #552	@ 0x228
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	@ (80006ec <MX_GPIO_Init+0x100>)
 80006c6:	f001 fa8f 	bl	8001be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2028      	movs	r0, #40	@ 0x28
 80006d0:	f001 fa53 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d4:	2028      	movs	r0, #40	@ 0x28
 80006d6:	f001 fa6c 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	10210000 	.word	0x10210000

080006f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_15) {
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000704:	d107      	bne.n	8000716 <HAL_GPIO_EXTI_Callback+0x22>
        count += 1;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_GPIO_EXTI_Callback+0x2c>)
 800070e:	6013      	str	r3, [r2, #0]
        buttonPressed = 1;
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x30>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
    }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000168 	.word	0x20000168
 8000724:	20000164 	.word	0x20000164

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2110      	movs	r1, #16
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <ST7735_Select+0x14>)
 800073e:	f001 fbd7 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40010800 	.word	0x40010800

0800074c <ST7735_Unselect>:

void ST7735_Unselect() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2110      	movs	r1, #16
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <ST7735_Unselect+0x14>)
 8000756:	f001 fbcb 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800

08000764 <ST7735_Reset>:

static void ST7735_Reset() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2108      	movs	r1, #8
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <ST7735_Reset+0x24>)
 800076e:	f001 fbbf 	bl	8001ef0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000772:	2005      	movs	r0, #5
 8000774:	f000 fcda 	bl	800112c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2108      	movs	r1, #8
 800077c:	4802      	ldr	r0, [pc, #8]	@ (8000788 <ST7735_Reset+0x24>)
 800077e:	f001 fbb7 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010c00 	.word	0x40010c00

0800078c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	// sizeof(cmd) or 1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <ST7735_WriteCommand+0x2c>)
 800079c:	f001 fba8 	bl	8001ef0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <ST7735_WriteCommand+0x30>)
 80007aa:	f002 fad2 	bl	8002d52 <HAL_SPI_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	200000c4 	.word	0x200000c4

080007c0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2120      	movs	r1, #32
 80007ce:	4807      	ldr	r0, [pc, #28]	@ (80007ec <ST7735_WriteData+0x2c>)
 80007d0:	f001 fb8e 	bl	8001ef0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <ST7735_WriteData+0x30>)
 80007e0:	f002 fab7 	bl	8002d52 <HAL_SPI_Transmit>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	200000c4 	.word	0x200000c4

080007f4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000806:	e034      	b.n	8000872 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000812:	7afb      	ldrb	r3, [r7, #11]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffb9 	bl	800078c <ST7735_WriteCommand>

        numArgs = *addr++;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000824:	7abb      	ldrb	r3, [r7, #10]
 8000826:	b29b      	uxth	r3, r3
 8000828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800082e:	7abb      	ldrb	r3, [r7, #10]
 8000830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000834:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000836:	7abb      	ldrb	r3, [r7, #10]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800083c:	7abb      	ldrb	r3, [r7, #10]
 800083e:	4619      	mov	r1, r3
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ffbd 	bl	80007c0 <ST7735_WriteData>
            addr += numArgs;
 8000846:	7abb      	ldrb	r3, [r7, #10]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00e      	beq.n	8000872 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	2bff      	cmp	r3, #255	@ 0xff
 8000862:	d102      	bne.n	800086a <ST7735_ExecuteCommandList+0x76>
 8000864:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000868:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fc5d 	bl	800112c <HAL_Delay>
    while(numCommands--) {
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	73fa      	strb	r2, [r7, #15]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1c5      	bne.n	8000808 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	4604      	mov	r4, r0
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4623      	mov	r3, r4
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4603      	mov	r3, r0
 800089a:	71bb      	strb	r3, [r7, #6]
 800089c:	460b      	mov	r3, r1
 800089e:	717b      	strb	r3, [r7, #5]
 80008a0:	4613      	mov	r3, r2
 80008a2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008a4:	202a      	movs	r0, #42	@ 0x2a
 80008a6:	f7ff ff71 	bl	800078c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80008aa:	2300      	movs	r3, #0
 80008ac:	733b      	strb	r3, [r7, #12]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3302      	adds	r3, #2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	737b      	strb	r3, [r7, #13]
 80008b6:	2300      	movs	r3, #0
 80008b8:	73bb      	strb	r3, [r7, #14]
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	3302      	adds	r3, #2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff79 	bl	80007c0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008ce:	202b      	movs	r0, #43	@ 0x2b
 80008d0:	f7ff ff5c 	bl	800078c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	3303      	adds	r3, #3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80008dc:	793b      	ldrb	r3, [r7, #4]
 80008de:	3303      	adds	r3, #3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff68 	bl	80007c0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008f0:	202c      	movs	r0, #44	@ 0x2c
 80008f2:	f7ff ff4b 	bl	800078c <ST7735_WriteCommand>
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd90      	pop	{r4, r7, pc}
	...

08000900 <ST7735_Init>:

void ST7735_Init() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000904:	f7ff ff16 	bl	8000734 <ST7735_Select>
    ST7735_Reset();
 8000908:	f7ff ff2c 	bl	8000764 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800090c:	4806      	ldr	r0, [pc, #24]	@ (8000928 <ST7735_Init+0x28>)
 800090e:	f7ff ff71 	bl	80007f4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <ST7735_Init+0x2c>)
 8000914:	f7ff ff6e 	bl	80007f4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <ST7735_Init+0x30>)
 800091a:	f7ff ff6b 	bl	80007f4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800091e:	f7ff ff15 	bl	800074c <ST7735_Unselect>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08004ea8 	.word	0x08004ea8
 800092c:	08004ee4 	.word	0x08004ee4
 8000930:	08004ef4 	.word	0x08004ef4

08000934 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	460b      	mov	r3, r1
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2b7f      	cmp	r3, #127	@ 0x7f
 800094a:	d823      	bhi.n	8000994 <ST7735_DrawPixel+0x60>
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000950:	d820      	bhi.n	8000994 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000952:	f7ff feef 	bl	8000734 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f7ff ff8a 	bl	8000886 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	733b      	strb	r3, [r7, #12]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff19 	bl	80007c0 <ST7735_WriteData>

    ST7735_Unselect();
 800098e:	f7ff fedd 	bl	800074c <ST7735_Unselect>
 8000992:	e000      	b.n	8000996 <ST7735_DrawPixel+0x62>
        return;
 8000994:	bf00      	nop
}
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <ST7735_WriteChar>:
            y0 += sy;
        }
    }
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800099c:	b082      	sub	sp, #8
 800099e:	b590      	push	{r4, r7, lr}
 80009a0:	b089      	sub	sp, #36	@ 0x24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	460b      	mov	r3, r1
 80009ac:	80bb      	strh	r3, [r7, #4]
 80009ae:	4613      	mov	r3, r2
 80009b0:	70fb      	strb	r3, [r7, #3]
   uint32_t i, b, j;

   ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2d8      	uxtb	r0, r3
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	b2d9      	uxtb	r1, r3
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009c2:	4413      	add	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b2dc      	uxtb	r4, r3
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009d2:	4413      	add	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4622      	mov	r2, r4
 80009dc:	f7ff ff53 	bl	8000886 <ST7735_SetAddressWindow>

   for(i = 0; i < font.height; i++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e043      	b.n	8000a6e <ST7735_WriteChar+0xd2>
       b = font.data[(ch - 32) * font.height + i];
 80009e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	3b20      	subs	r3, #32
 80009ec:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	440b      	add	r3, r1
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	617b      	str	r3, [r7, #20]
       for(j = 0; j < font.width; j++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	e029      	b.n	8000a5c <ST7735_WriteChar+0xc0>
           if((b << j) & 0x8000)  {
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00e      	beq.n	8000a36 <ST7735_WriteChar+0x9a>
               uint8_t data[] = { color >> 8, color & 0xFF };
 8000a18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	743b      	strb	r3, [r7, #16]
 8000a22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	747b      	strb	r3, [r7, #17]
               ST7735_WriteData(data, sizeof(data));
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fec6 	bl	80007c0 <ST7735_WriteData>
 8000a34:	e00f      	b.n	8000a56 <ST7735_WriteChar+0xba>
           } else {
               uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	733b      	strb	r3, [r7, #12]
 8000a42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	737b      	strb	r3, [r7, #13]
               ST7735_WriteData(data, sizeof(data));
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff feb5 	bl	80007c0 <ST7735_WriteData>
       for(j = 0; j < font.width; j++) {
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a60:	461a      	mov	r2, r3
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d3cf      	bcc.n	8000a08 <ST7735_WriteChar+0x6c>
   for(i = 0; i < font.height; i++) {
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a72:	461a      	mov	r2, r3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d3b5      	bcc.n	80009e6 <ST7735_WriteChar+0x4a>
           }
       }
   }
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3724      	adds	r7, #36	@ 0x24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr

08000a8a <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	80bb      	strh	r3, [r7, #4]
   ST7735_Select();
 8000a9e:	f7ff fe49 	bl	8000734 <ST7735_Select>

   while(*str) {
 8000aa2:	e02d      	b.n	8000b00 <ST7735_WriteString+0x76>
       if(x + font.width >= ST7735_WIDTH) {
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	7d3a      	ldrb	r2, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aac:	dd13      	ble.n	8000ad6 <ST7735_WriteString+0x4c>
           x = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	80fb      	strh	r3, [r7, #6]
           y += font.height;
 8000ab2:	7d7b      	ldrb	r3, [r7, #21]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	80bb      	strh	r3, [r7, #4]
           if(y + font.height >= ST7735_HEIGHT) {
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	7d7a      	ldrb	r2, [r7, #21]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac4:	dc21      	bgt.n	8000b0a <ST7735_WriteString+0x80>
               break;
           }

           if(*str == ' ') {
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b20      	cmp	r3, #32
 8000acc:	d103      	bne.n	8000ad6 <ST7735_WriteString+0x4c>
               // skip spaces in the beginning of the new line
               str++;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	603b      	str	r3, [r7, #0]
               continue;
 8000ad4:	e014      	b.n	8000b00 <ST7735_WriteString+0x76>
           }
       }

       ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	8c3b      	ldrh	r3, [r7, #32]
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	8bbb      	ldrh	r3, [r7, #28]
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f7ff ff56 	bl	800099c <ST7735_WriteChar>
       x += font.width;
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	461a      	mov	r2, r3
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4413      	add	r3, r2
 8000af8:	80fb      	strh	r3, [r7, #6]
       str++;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	603b      	str	r3, [r7, #0]
   while(*str) {
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1cd      	bne.n	8000aa4 <ST7735_WriteString+0x1a>
 8000b08:	e000      	b.n	8000b0c <ST7735_WriteString+0x82>
               break;
 8000b0a:	bf00      	nop
   }

   ST7735_Unselect();
 8000b0c:	f7ff fe1e 	bl	800074c <ST7735_Unselect>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b1a:	b002      	add	sp, #8
 8000b1c:	4770      	bx	lr

08000b1e <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b1e:	b590      	push	{r4, r7, lr}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4604      	mov	r4, r0
 8000b26:	4608      	mov	r0, r1
 8000b28:	4611      	mov	r1, r2
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4623      	mov	r3, r4
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	4603      	mov	r3, r0
 8000b32:	80bb      	strh	r3, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	803b      	strh	r3, [r7, #0]
    // Draw horizontal linesST7735_DrawRectangle
    for (uint16_t i = 0; i < w; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	81fb      	strh	r3, [r7, #14]
 8000b40:	e019      	b.n	8000b76 <ST7735_DrawRectangle+0x58>
        ST7735_DrawPixel(x + i, y, color);
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	4413      	add	r3, r2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	8c3a      	ldrh	r2, [r7, #32]
 8000b4c:	88b9      	ldrh	r1, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fef0 	bl	8000934 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + i, y + h - 1, color);
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b298      	uxth	r0, r3
 8000b5c:	88ba      	ldrh	r2, [r7, #4]
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	3b01      	subs	r3, #1
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	8c3a      	ldrh	r2, [r7, #32]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f7ff fee2 	bl	8000934 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < w; i++) {
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	3301      	adds	r3, #1
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	89fa      	ldrh	r2, [r7, #14]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3e1      	bcc.n	8000b42 <ST7735_DrawRectangle+0x24>
    }

    // Draw vertical lines
    for (uint16_t i = 0; i < h; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	81bb      	strh	r3, [r7, #12]
 8000b82:	e019      	b.n	8000bb8 <ST7735_DrawRectangle+0x9a>
        ST7735_DrawPixel(x, y + i, color);
 8000b84:	88ba      	ldrh	r2, [r7, #4]
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	4413      	add	r3, r2
 8000b8a:	b299      	uxth	r1, r3
 8000b8c:	8c3a      	ldrh	r2, [r7, #32]
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fecf 	bl	8000934 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + w - 1, y + i, color);
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b298      	uxth	r0, r3
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	89bb      	ldrh	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	8c3a      	ldrh	r2, [r7, #32]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f7ff fec1 	bl	8000934 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < h; i++) {
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	81bb      	strh	r3, [r7, #12]
 8000bb8:	89ba      	ldrh	r2, [r7, #12]
 8000bba:	883b      	ldrh	r3, [r7, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d3e1      	bcc.n	8000b84 <ST7735_DrawRectangle+0x66>
    }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
	...

08000bcc <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4623      	mov	r3, r4
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	4603      	mov	r3, r0
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	807b      	strh	r3, [r7, #2]
 8000be6:	4613      	mov	r3, r2
 8000be8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bee:	d869      	bhi.n	8000cc4 <ST7735_FillRectangleFast+0xf8>
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf4:	d866      	bhi.n	8000cc4 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	2b80      	cmp	r3, #128	@ 0x80
 8000bfe:	dd03      	ble.n	8000c08 <ST7735_FillRectangleFast+0x3c>
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c06:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000c08:	88ba      	ldrh	r2, [r7, #4]
 8000c0a:	883b      	ldrh	r3, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2b80      	cmp	r3, #128	@ 0x80
 8000c10:	dd03      	ble.n	8000c1a <ST7735_FillRectangleFast+0x4e>
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c18:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c1a:	f7ff fd8b 	bl	8000734 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	b2d8      	uxtb	r0, r3
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b2dc      	uxtb	r4, r3
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	883b      	ldrh	r3, [r7, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4622      	mov	r2, r4
 8000c48:	f7ff fe1d 	bl	8000886 <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000c4c:	8c3b      	ldrh	r3, [r7, #32]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	723b      	strb	r3, [r7, #8]
 8000c56:	8c3b      	ldrh	r3, [r7, #32]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 f887 	bl	8003d74 <malloc>
 8000c66:	4603      	mov	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	80fb      	strh	r3, [r7, #6]
 8000c6e:	e008      	b.n	8000c82 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	893a      	ldrh	r2, [r7, #8]
 8000c7a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3f2      	bcc.n	8000c70 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	480f      	ldr	r0, [pc, #60]	@ (8000ccc <ST7735_FillRectangleFast+0x100>)
 8000c90:	f001 f92e 	bl	8001ef0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	80bb      	strh	r3, [r7, #4]
 8000c98:	e00b      	b.n	8000cb2 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <ST7735_FillRectangleFast+0x104>)
 8000ca8:	f002 f853 	bl	8002d52 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f0      	bne.n	8000c9a <ST7735_FillRectangleFast+0xce>

    free(line);
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f003 f863 	bl	8003d84 <free>
    ST7735_Unselect();
 8000cbe:	f7ff fd45 	bl	800074c <ST7735_Unselect>
 8000cc2:	e000      	b.n	8000cc6 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000cc4:	bf00      	nop
}
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	200000c4 	.word	0x200000c4

08000cd4 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2380      	movs	r3, #128	@ 0x80
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff6f 	bl	8000bcc <ST7735_FillRectangleFast>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_MspInit+0x5c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_MspInit+0x60>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_MspInit+0x60>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <HAL_ADC_MspInit+0x6c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d121      	bne.n	8000dc0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a0c      	ldr	r2, [pc, #48]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_ADC_MspInit+0x70>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_ADC_MspInit+0x74>)
 8000dbc:	f000 ff14 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012400 	.word	0x40012400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <HAL_RTC_MspInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d110      	bne.n	8000e08 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000de6:	f001 f8b3 	bl	8001f50 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_RTC_MspInit+0x40>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_RTC_MspInit+0x40>)
 8000df0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <HAL_RTC_MspInit+0x40>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e02:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_RTC_MspInit+0x44>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40002800 	.word	0x40002800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	4242043c 	.word	0x4242043c

08000e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <HAL_SPI_MspInit+0x70>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d123      	bne.n	8000e84 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a13      	ldr	r2, [pc, #76]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_SPI_MspInit+0x74>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000e6c:	23b0      	movs	r3, #176	@ 0xb0
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_SPI_MspInit+0x78>)
 8000e80:	f000 feb2 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40013000 	.word	0x40013000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010800 	.word	0x40010800

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <HAL_TIM_Base_MspInit+0x34>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40012c00 	.word	0x40012c00
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_TIM_MspPostInit+0x5c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d118      	bne.n	8000f26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_TIM_MspPostInit+0x60>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <HAL_TIM_MspPostInit+0x60>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_TIM_MspPostInit+0x60>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <HAL_TIM_MspPostInit+0x64>)
 8000f22:	f000 fe61 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8b2 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f98:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f9c:	f000 ffc0 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f002 ffd8 	bl	8003f88 <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20005000 	.word	0x20005000
 8001004:	00000400 	.word	0x00000400
 8001008:	2000017c 	.word	0x2000017c
 800100c:	200002d0 	.word	0x200002d0

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff fff8 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480b      	ldr	r0, [pc, #44]	@ (8001050 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001022:	490c      	ldr	r1, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001024:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a09      	ldr	r2, [pc, #36]	@ (800105c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001038:	4c09      	ldr	r4, [pc, #36]	@ (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f002 ffa5 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104a:	f7ff f87f 	bl	800014c <main>
  bx lr
 800104e:	4770      	bx	lr
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001058:	08004f9c 	.word	0x08004f9c
  ldr r2, =_sbss
 800105c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001060:	200002cc 	.word	0x200002cc

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fd73 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe38 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd8b 	bl	8001bce <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fd53 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000010 	.word	0x20000010
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <HAL_IncTick+0x20>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000010 	.word	0x20000010
 8001114:	20000180 	.word	0x20000180

08001118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000180 	.word	0x20000180

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff0 	bl	8001118 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffe0 	bl	8001118 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000010 	.word	0x20000010

08001174 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0be      	b.n	8001314 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d109      	bne.n	80011b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fdd2 	bl	8000d5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fbc5 	bl	8001948 <ADC_ConversionStop_Disable>
 80011be:	4603      	mov	r3, r0
 80011c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 8099 	bne.w	8001302 <HAL_ADC_Init+0x18e>
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 8095 	bne.w	8001302 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011e0:	f023 0302 	bic.w	r3, r3, #2
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b1b      	ldrb	r3, [r3, #12]
 80011fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	4313      	orrs	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800120c:	d003      	beq.n	8001216 <HAL_ADC_Init+0xa2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_ADC_Init+0xa8>
 8001216:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121a:	e000      	b.n	800121e <HAL_ADC_Init+0xaa>
 800121c:	2300      	movs	r3, #0
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7d1b      	ldrb	r3, [r3, #20]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d119      	bne.n	8001260 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7b1b      	ldrb	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	3b01      	subs	r3, #1
 800123a:	035a      	lsls	r2, r3, #13
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	e00b      	b.n	8001260 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f043 0220 	orr.w	r2, r3, #32
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	4b28      	ldr	r3, [pc, #160]	@ (800131c <HAL_ADC_Init+0x1a8>)
 800127c:	4013      	ands	r3, r2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	430b      	orrs	r3, r1
 8001286:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001290:	d003      	beq.n	800129a <HAL_ADC_Init+0x126>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d104      	bne.n	80012a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	3b01      	subs	r3, #1
 80012a0:	051b      	lsls	r3, r3, #20
 80012a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_ADC_Init+0x1ac>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10b      	bne.n	80012e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f023 0303 	bic.w	r3, r3, #3
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012de:	e018      	b.n	8001312 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	f023 0312 	bic.w	r3, r3, #18
 80012e8:	f043 0210 	orr.w	r2, r3, #16
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001300:	e007      	b.n	8001312 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	ffe1f7fd 	.word	0xffe1f7fd
 8001320:	ff1f0efe 	.word	0xff1f0efe

08001324 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Start+0x1a>
 800133a:	2302      	movs	r3, #2
 800133c:	e098      	b.n	8001470 <HAL_ADC_Start+0x14c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 faa4 	bl	8001894 <ADC_Enable>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 8087 	bne.w	8001466 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a41      	ldr	r2, [pc, #260]	@ (8001478 <HAL_ADC_Start+0x154>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d105      	bne.n	8001382 <HAL_ADC_Start+0x5e>
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_ADC_Start+0x158>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d115      	bne.n	80013ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d026      	beq.n	80013ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ac:	e01d      	b.n	80013ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <HAL_ADC_Start+0x158>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d004      	beq.n	80013ce <HAL_ADC_Start+0xaa>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001478 <HAL_ADC_Start+0x154>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10d      	bne.n	80013ea <HAL_ADC_Start+0xc6>
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <HAL_ADC_Start+0x158>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fa:	f023 0206 	bic.w	r2, r3, #6
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001402:	e002      	b.n	800140a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0202 	mvn.w	r2, #2
 800141a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001426:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800142a:	d113      	bne.n	8001454 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001430:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_ADC_Start+0x154>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d105      	bne.n	8001442 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_ADC_Start+0x158>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	e00c      	b.n	800146e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e003      	b.n	800146e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012800 	.word	0x40012800
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001496:	f7ff fe3f 	bl	8001118 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0d3      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d131      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12a      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014de:	e021      	b.n	8001524 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d01d      	beq.n	8001524 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_ADC_PollForConversion+0x7e>
 80014ee:	f7ff fe13 	bl	8001118 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d212      	bcs.n	8001524 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0a2      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0d6      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	e070      	b.n	8001616 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <HAL_ADC_PollForConversion+0x1f4>)
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	2002      	movs	r0, #2
 800153a:	f001 f9c7 	bl	80028cc <HAL_RCCEx_GetPeriphCLKFreq>
 800153e:	4603      	mov	r3, r0
 8001540:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	4b4b      	ldr	r3, [pc, #300]	@ (8001678 <HAL_ADC_PollForConversion+0x1f8>)
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	4b48      	ldr	r3, [pc, #288]	@ (800167c <HAL_ADC_PollForConversion+0x1fc>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6919      	ldr	r1, [r3, #16]
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <HAL_ADC_PollForConversion+0x200>)
 8001568:	400b      	ands	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <HAL_ADC_PollForConversion+0x204>)
 8001576:	400b      	ands	r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800157c:	2314      	movs	r3, #20
 800157e:	e020      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001580:	2329      	movs	r3, #41	@ 0x29
 8001582:	e01e      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_ADC_PollForConversion+0x200>)
 800158c:	400b      	ands	r3, r1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x120>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <HAL_ADC_PollForConversion+0x204>)
 800159a:	400b      	ands	r3, r1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00d      	beq.n	80015bc <HAL_ADC_PollForConversion+0x13c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015b6:	400b      	ands	r3, r1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015bc:	2354      	movs	r3, #84	@ 0x54
 80015be:	e000      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 80015c0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015c8:	e021      	b.n	800160e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d01a      	beq.n	8001608 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x168>
 80015d8:	f7ff fd9e 	bl	8001118 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d20f      	bcs.n	8001608 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d90b      	bls.n	8001608 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	f043 0204 	orr.w	r2, r3, #4
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e030      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	d8d9      	bhi.n	80015ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f06f 0212 	mvn.w	r2, #18
 800161e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001636:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800163a:	d115      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	24924924 	.word	0x24924924
 800167c:	00924924 	.word	0x00924924
 8001680:	12492492 	.word	0x12492492
 8001684:	00492492 	.word	0x00492492
 8001688:	00249249 	.word	0x00249249

0800168c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0dc      	b.n	800187e <HAL_ADC_ConfigChannel+0x1da>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d81c      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b05      	subs	r3, #5
 80016e6:	221f      	movs	r2, #31
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34
 800170c:	e03c      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d81c      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b23      	subs	r3, #35	@ 0x23
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	@ 0x23
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
 800174e:	e01b      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	@ 0x41
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	@ 0x41
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d91c      	bls.n	80017ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	e019      	b.n	80017fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d003      	beq.n	800180e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	2b11      	cmp	r3, #17
 800180c:	d132      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <HAL_ADC_ConfigChannel+0x1e4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d125      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d126      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001834:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_ADC_ConfigChannel+0x1e8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <HAL_ADC_ConfigChannel+0x1ec>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9a      	lsrs	r2, r3, #18
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001854:	e002      	b.n	800185c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x1b2>
 8001862:	e007      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012400 	.word	0x40012400
 800188c:	20000008 	.word	0x20000008
 8001890:	431bde83 	.word	0x431bde83

08001894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d040      	beq.n	8001934 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <ADC_Enable+0xac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <ADC_Enable+0xb0>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d0:	e002      	b.n	80018d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fc1b 	bl	8001118 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	e01f      	b.n	8001926 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fc17 	bl	8001118 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d918      	bls.n	8001926 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d011      	beq.n	8001926 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d1d8      	bne.n	80018e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d12e      	bne.n	80019c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001972:	f7ff fbd1 	bl	8001118 <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001978:	e01b      	b.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197a:	f7ff fbcd 	bl	8001118 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d914      	bls.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	f043 0210 	orr.w	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0dc      	beq.n	800197a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4906      	ldr	r1, [pc, #24]	@ (8001a64 <__NVIC_EnableIRQ+0x34>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	@ (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff90 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff2d 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff42 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff90 	bl	8001abc <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5f 	bl	8001a68 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff35 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	@ 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e169      	b.n	8001ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8158 	bne.w	8001eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a9a      	ldr	r2, [pc, #616]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a98      	ldr	r2, [pc, #608]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d875      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c2a:	4a98      	ldr	r2, [pc, #608]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d058      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c30:	4a96      	ldr	r2, [pc, #600]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d86f      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c36:	4a96      	ldr	r2, [pc, #600]	@ (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d052      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a94      	ldr	r2, [pc, #592]	@ (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d869      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c42:	4a94      	ldr	r2, [pc, #592]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04c      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c48:	4a92      	ldr	r2, [pc, #584]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d863      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a92      	ldr	r2, [pc, #584]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d046      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c54:	4a90      	ldr	r2, [pc, #576]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d85d      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d82a      	bhi.n	8001cb4 <HAL_GPIO_Init+0xcc>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d859      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c62:	a201      	add	r2, pc, #4	@ (adr r2, 8001c68 <HAL_GPIO_Init+0x80>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d11 	.word	0x08001d11
 8001c78:	08001d17 	.word	0x08001d17
 8001c7c:	08001d17 	.word	0x08001d17
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d17 	.word	0x08001d17
 8001c88:	08001d17 	.word	0x08001d17
 8001c8c:	08001d17 	.word	0x08001d17
 8001c90:	08001d17 	.word	0x08001d17
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d17 	.word	0x08001d17
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001d17 	.word	0x08001d17
 8001ca4:	08001d17 	.word	0x08001d17
 8001ca8:	08001d17 	.word	0x08001d17
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cd9 	.word	0x08001cd9
 8001cb4:	4a79      	ldr	r2, [pc, #484]	@ (8001e9c <HAL_GPIO_Init+0x2b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cba:	e02c      	b.n	8001d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e029      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e024      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e01f      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e01a      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cea:	2304      	movs	r3, #4
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e013      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	611a      	str	r2, [r3, #16]
          break;
 8001d02:	e009      	b.n	8001d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	615a      	str	r2, [r3, #20]
          break;
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          break;
 8001d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2bff      	cmp	r3, #255	@ 0xff
 8001d1c:	d801      	bhi.n	8001d22 <HAL_GPIO_Init+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_Init+0x13e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	@ 0xff
 8001d2c:	d802      	bhi.n	8001d34 <HAL_GPIO_Init+0x14c>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x152>
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	3b08      	subs	r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	210f      	movs	r1, #15
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b1 	beq.w	8001eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	4a48      	ldr	r2, [pc, #288]	@ (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a40      	ldr	r2, [pc, #256]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1ec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HAL_GPIO_Init+0x2c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <HAL_GPIO_Init+0x2c8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	@ (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	492c      	ldr	r1, [pc, #176]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4928      	ldr	r1, [pc, #160]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4918      	ldr	r1, [pc, #96]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4914      	ldr	r1, [pc, #80]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d021      	beq.n	8001ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e021      	b.n	8001eca <HAL_GPIO_Init+0x2e2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4909      	ldr	r1, [pc, #36]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f ae8e 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	372c      	adds	r7, #44	@ 0x2c
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fbd8 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	420e0020 	.word	0x420e0020

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e272      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00c      	beq.n	8001fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d112      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d06c      	beq.n	8002094 <HAL_RCC_OscConfig+0x12c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e24c      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x76>
 8001fd0:	4b80      	ldr	r3, [pc, #512]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b78      	ldr	r3, [pc, #480]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xbc>
 800200a:	4b72      	ldr	r3, [pc, #456]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6f      	ldr	r3, [pc, #444]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002024:	4b6b      	ldr	r3, [pc, #428]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff f868 	bl	8001118 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f864 	bl	8001118 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e200      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xe4>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff f854 	bl	8001118 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff f850 	bl	8001118 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1ec      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x10c>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ae:	4b49      	ldr	r3, [pc, #292]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
 80020ba:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1c0      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4939      	ldr	r1, [pc, #228]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff f809 	bl	8001118 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f805 	bl	8001118 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1a1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4927      	ldr	r1, [pc, #156]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ffe8 	bl	8001118 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe ffe4 	bl	8001118 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e180      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03a      	beq.n	80021ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe ffc8 	bl	8001118 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe ffc4 	bl	8001118 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e160      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 faba 	bl	8002724 <RCC_Delay>
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe ffae 	bl	8001118 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe ffaa 	bl	8001118 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d908      	bls.n	80021e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e146      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b92      	ldr	r3, [pc, #584]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b8b      	ldr	r3, [pc, #556]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a87      	ldr	r2, [pc, #540]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b85      	ldr	r3, [pc, #532]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b82      	ldr	r3, [pc, #520]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b7f      	ldr	r3, [pc, #508]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7e      	ldr	r2, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe ff6b 	bl	8001118 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe ff67 	bl	8001118 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	@ 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e103      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b75      	ldr	r3, [pc, #468]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 800226c:	4b6f      	ldr	r3, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a6e      	ldr	r2, [pc, #440]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x334>
 8002282:	4b6a      	ldr	r3, [pc, #424]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a69      	ldr	r2, [pc, #420]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b67      	ldr	r3, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a66      	ldr	r2, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e01c      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x356>
 80022a4:	4b61      	ldr	r3, [pc, #388]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a60      	ldr	r2, [pc, #384]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	4b5e      	ldr	r3, [pc, #376]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 80022be:	4b5b      	ldr	r3, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a5a      	ldr	r2, [pc, #360]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b58      	ldr	r3, [pc, #352]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a57      	ldr	r2, [pc, #348]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe ff1b 	bl	8001118 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe ff17 	bl	8001118 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0b1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCC_OscConfig+0x37e>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe ff05 	bl	8001118 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe ff01 	bl	8001118 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e09b      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a3b      	ldr	r2, [pc, #236]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d061      	beq.n	8002420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d146      	bne.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fed5 	bl	8001118 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fed1 	bl	8001118 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e06d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4921      	ldr	r1, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	430b      	orrs	r3, r1
 80023be:	491b      	ldr	r1, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fea5 	bl	8001118 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fea1 	bl	8001118 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
 80023f0:	e035      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fe8e 	bl	8001118 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fe8a 	bl	8001118 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e026      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x498>
 800241e:	e01e      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e019      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x500>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fddc 	bl	8001118 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fdd8 	bl	8001118 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd3a 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08004f20 	.word	0x08004f20
 8002638:	20000008 	.word	0x20000008
 800263c:	2000000c 	.word	0x2000000c

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x36>
 800266e:	e027      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002672:	613b      	str	r3, [r7, #16]
      break;
 8002674:	e027      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	fb03 f202 	mul.w	r2, r3, r2
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e004      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	693b      	ldr	r3, [r7, #16]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200
 80026dc:	08004f38 	.word	0x08004f38
 80026e0:	08004f48 	.word	0x08004f48
 80026e4:	003d0900 	.word	0x003d0900

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b02      	ldr	r3, [pc, #8]	@ (80026f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002700:	f7ff fff2 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0adb      	lsrs	r3, r3, #11
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	@ (8002720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	08004f30 	.word	0x08004f30

08002724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <RCC_Delay+0x34>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <RCC_Delay+0x38>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002740:	bf00      	nop
  }
  while (Delay --);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f9      	bne.n	8002740 <RCC_Delay+0x1c>
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000008 	.word	0x20000008
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d07d      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002780:	4b4f      	ldr	r3, [pc, #316]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002796:	61d3      	str	r3, [r2, #28]
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b46      	ldr	r3, [pc, #280]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d118      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b4:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a42      	ldr	r2, [pc, #264]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fcaa 	bl	8001118 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fca6 	bl	8001118 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e06d      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02e      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d027      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002804:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002814:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800281a:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fc75 	bl	8001118 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fc71 	bl	8001118 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e036      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002854:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4917      	ldr	r1, [pc, #92]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	4313      	orrs	r3, r2
 8002864:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286c:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002876:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	490b      	ldr	r1, [pc, #44]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42420440 	.word	0x42420440

080028cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	f200 808a 	bhi.w	8002a0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d045      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d075      	beq.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002902:	e082      	b.n	8002a0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002904:	4b46      	ldr	r3, [pc, #280]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800290a:	4b45      	ldr	r3, [pc, #276]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07b      	beq.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a41      	ldr	r2, [pc, #260]	@ (8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0c5b      	lsrs	r3, r3, #17
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	4a3b      	ldr	r2, [pc, #236]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002948:	4a38      	ldr	r2, [pc, #224]	@ (8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	e004      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4a34      	ldr	r2, [pc, #208]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002970:	d102      	bne.n	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	61bb      	str	r3, [r7, #24]
      break;
 8002976:	e04a      	b.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
      break;
 8002986:	e042      	b.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002988:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002998:	d108      	bne.n	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80029a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e01f      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b6:	d109      	bne.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80029c4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e00f      	b.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029d6:	d11c      	bne.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80029e4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80029e8:	61bb      	str	r3, [r7, #24]
      break;
 80029ea:	e012      	b.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029ec:	e011      	b.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029ee:	f7ff fe85 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0b9b      	lsrs	r3, r3, #14
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	61bb      	str	r3, [r7, #24]
      break;
 8002a08:	e004      	b.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a12:	bf00      	nop
    }
  }
  return (frequency);
 8002a14:	69bb      	ldr	r3, [r7, #24]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08004f4c 	.word	0x08004f4c
 8002a28:	08004f5c 	.word	0x08004f5c
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	003d0900 	.word	0x003d0900
 8002a34:	aaaaaaab 	.word	0xaaaaaaab

08002a38 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07a      	b.n	8002b44 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7c5b      	ldrb	r3, [r3, #17]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f9b8 	bl	8000dd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f870 	bl	8002b50 <HAL_RTC_WaitForSynchro>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e061      	b.n	8002b44 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f892 	bl	8002baa <RTC_EnterInitMode>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e056      	b.n	8002b44 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0207 	bic.w	r2, r2, #7
 8002aa4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_RTC_Init+0x114>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a26      	ldr	r2, [pc, #152]	@ (8002b4c <HAL_RTC_Init+0x114>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RTC_Init+0x114>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4921      	ldr	r1, [pc, #132]	@ (8002b4c <HAL_RTC_Init+0x114>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d003      	beq.n	8002ade <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e00e      	b.n	8002afc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7ff fef4 	bl	80028cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002ae4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e026      	b.n	8002b44 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	0c1a      	lsrs	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f002 020f 	and.w	r2, r2, #15
 8002b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	b292      	uxth	r2, r2
 8002b12:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f870 	bl	8002bfa <RTC_ExitInitMode>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2204      	movs	r2, #4
 8002b24:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00c      	b.n	8002b44 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40006c00 	.word	0x40006c00

08002b50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01d      	b.n	8002ba2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0208 	bic.w	r2, r2, #8
 8002b74:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b76:	f7fe facf 	bl	8001118 <HAL_GetTick>
 8002b7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b7c:	e009      	b.n	8002b92 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b7e:	f7fe facb 	bl	8001118 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b8c:	d901      	bls.n	8002b92 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e007      	b.n	8002ba2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002bb6:	f7fe faaf 	bl	8001118 <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bbc:	e009      	b.n	8002bd2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bbe:	f7fe faab 	bl	8001118 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bcc:	d901      	bls.n	8002bd2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ee      	beq.n	8002bbe <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0210 	orr.w	r2, r2, #16
 8002bee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0210 	bic.w	r2, r2, #16
 8002c14:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002c16:	f7fe fa7f 	bl	8001118 <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c1c:	e009      	b.n	8002c32 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c1e:	f7fe fa7b 	bl	8001118 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c2c:	d901      	bls.n	8002c32 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e007      	b.n	8002c42 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e076      	b.n	8002d4a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c6c:	d009      	beq.n	8002c82 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]
 8002c74:	e005      	b.n	8002c82 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe f8bd 	bl	8000e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	ea42 0103 	orr.w	r1, r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	0c1a      	lsrs	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 0204 	and.w	r2, r2, #4
 8002d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_SPI_Transmit+0x22>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e12d      	b.n	8002fd0 <HAL_SPI_Transmit+0x27e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d7c:	f7fe f9cc 	bl	8001118 <HAL_GetTick>
 8002d80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d96:	e116      	b.n	8002fc6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0x52>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da8:	e10d      	b.n	8002fc6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2203      	movs	r2, #3
 8002dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002df0:	d10f      	bne.n	8002e12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d007      	beq.n	8002e30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e38:	d14f      	bne.n	8002eda <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0xf6>
 8002e42:	8afb      	ldrh	r3, [r7, #22]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d142      	bne.n	8002ece <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e6c:	e02f      	b.n	8002ece <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d112      	bne.n	8002ea2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ea0:	e015      	b.n	8002ece <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea2:	f7fe f939 	bl	8001118 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d803      	bhi.n	8002eba <HAL_SPI_Transmit+0x168>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d102      	bne.n	8002ec0 <HAL_SPI_Transmit+0x16e>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ecc:	e07b      	b.n	8002fc6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ca      	bne.n	8002e6e <HAL_SPI_Transmit+0x11c>
 8002ed8:	e050      	b.n	8002f7c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Transmit+0x196>
 8002ee2:	8afb      	ldrh	r3, [r7, #22]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d144      	bne.n	8002f72 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f0e:	e030      	b.n	8002f72 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d113      	bne.n	8002f46 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f44:	e015      	b.n	8002f72 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f46:	f7fe f8e7 	bl	8001118 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d803      	bhi.n	8002f5e <HAL_SPI_Transmit+0x20c>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d102      	bne.n	8002f64 <HAL_SPI_Transmit+0x212>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f70:	e029      	b.n	8002fc6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1c9      	bne.n	8002f10 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	6839      	ldr	r1, [r7, #0]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f8b1 	bl	80030e8 <SPI_EndRxTxTransaction>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e003      	b.n	8002fc6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fe8:	f7fe f896 	bl	8001118 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ff8:	f7fe f88e 	bl	8001118 <HAL_GetTick>
 8002ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ffe:	4b39      	ldr	r3, [pc, #228]	@ (80030e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	015b      	lsls	r3, r3, #5
 8003004:	0d1b      	lsrs	r3, r3, #20
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300e:	e054      	b.n	80030ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d050      	beq.n	80030ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003018:	f7fe f87e 	bl	8001118 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	429a      	cmp	r2, r3
 8003026:	d902      	bls.n	800302e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d13d      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800303c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003046:	d111      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003050:	d004      	beq.n	800305c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305a:	d107      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800306a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003074:	d10f      	bne.n	8003096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e017      	b.n	80030da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d19b      	bne.n	8003010 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000008 	.word	0x20000008

080030e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2180      	movs	r1, #128	@ 0x80
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff ff6a 	bl	8002fd8 <SPI_WaitFlagStateUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e000      	b.n	800311c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e041      	b.n	80031ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fea4 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 fab2 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e041      	b.n	8003258 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f839 	bl	8003260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 fa63 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
	...

08003274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_TIM_PWM_Start+0x24>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e022      	b.n	80032de <HAL_TIM_PWM_Start+0x6a>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d109      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x3e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e015      	b.n	80032de <HAL_TIM_PWM_Start+0x6a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d109      	bne.n	80032cc <HAL_TIM_PWM_Start+0x58>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e008      	b.n	80032de <HAL_TIM_PWM_Start+0x6a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e05e      	b.n	80033a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x82>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f4:	e013      	b.n	800331e <HAL_TIM_PWM_Start+0xaa>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Start+0x92>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003304:	e00b      	b.n	800331e <HAL_TIM_PWM_Start+0xaa>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Start+0xa2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003314:	e003      	b.n	800331e <HAL_TIM_PWM_Start+0xaa>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fc50 	bl	8003bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <HAL_TIM_PWM_Start+0x138>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d107      	bne.n	8003346 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <HAL_TIM_PWM_Start+0x138>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <HAL_TIM_PWM_Start+0xfa>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d009      	beq.n	800336e <HAL_TIM_PWM_Start+0xfa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <HAL_TIM_PWM_Start+0x13c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_PWM_Start+0xfa>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <HAL_TIM_PWM_Start+0x140>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d111      	bne.n	8003392 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b06      	cmp	r3, #6
 800337e:	d010      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	e007      	b.n	80033a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800

080033b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0ae      	b.n	8003534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	f200 809f 	bhi.w	8003524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033e6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003525 	.word	0x08003525
 80033f4:	08003525 	.word	0x08003525
 80033f8:	08003525 	.word	0x08003525
 80033fc:	08003461 	.word	0x08003461
 8003400:	08003525 	.word	0x08003525
 8003404:	08003525 	.word	0x08003525
 8003408:	08003525 	.word	0x08003525
 800340c:	080034a3 	.word	0x080034a3
 8003410:	08003525 	.word	0x08003525
 8003414:	08003525 	.word	0x08003525
 8003418:	08003525 	.word	0x08003525
 800341c:	080034e3 	.word	0x080034e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f9b2 	bl	8003790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0208 	orr.w	r2, r2, #8
 800343a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6999      	ldr	r1, [r3, #24]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	619a      	str	r2, [r3, #24]
      break;
 800345e:	e064      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f9f8 	bl	800385c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6999      	ldr	r1, [r3, #24]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	619a      	str	r2, [r3, #24]
      break;
 80034a0:	e043      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fa41 	bl	8003930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0208 	orr.w	r2, r2, #8
 80034bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
      break;
 80034e0:	e023      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fa8b 	bl	8003a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	61da      	str	r2, [r3, #28]
      break;
 8003522:	e002      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
      break;
 8003528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003532:	7dfb      	ldrb	r3, [r7, #23]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIM_ConfigClockSource+0x1c>
 8003554:	2302      	movs	r3, #2
 8003556:	e0b4      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x186>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800357e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003590:	d03e      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xd4>
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003596:	f200 8087 	bhi.w	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	f000 8086 	beq.w	80036ae <HAL_TIM_ConfigClockSource+0x172>
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	d87f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b70      	cmp	r3, #112	@ 0x70
 80035aa:	d01a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0xa6>
 80035ac:	2b70      	cmp	r3, #112	@ 0x70
 80035ae:	d87b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b60      	cmp	r3, #96	@ 0x60
 80035b2:	d050      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x11a>
 80035b4:	2b60      	cmp	r3, #96	@ 0x60
 80035b6:	d877      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b50      	cmp	r3, #80	@ 0x50
 80035ba:	d03c      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xfa>
 80035bc:	2b50      	cmp	r3, #80	@ 0x50
 80035be:	d873      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b40      	cmp	r3, #64	@ 0x40
 80035c2:	d058      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x13a>
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d86f      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b30      	cmp	r3, #48	@ 0x30
 80035ca:	d064      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b30      	cmp	r3, #48	@ 0x30
 80035ce:	d86b      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d060      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d867      	bhi.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05c      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d05a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x15a>
 80035e0:	e062      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035f2:	f000 facc 	bl	8003b8e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	609a      	str	r2, [r3, #8]
      break;
 800360e:	e04f      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003620:	f000 fab5 	bl	8003b8e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e03c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fa2c 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2150      	movs	r1, #80	@ 0x50
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fa83 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003654:	e02c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fa4a 	bl	8003afc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2160      	movs	r1, #96	@ 0x60
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fa73 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003674:	e01c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	461a      	mov	r2, r3
 8003684:	f000 fa0c 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2140      	movs	r1, #64	@ 0x40
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fa63 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003694:	e00c      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fa5a 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80036a6:	e003      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e000      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	@ (8003784 <TIM_Base_SetConfig+0xb8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a26      	ldr	r2, [pc, #152]	@ (8003788 <TIM_Base_SetConfig+0xbc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a25      	ldr	r2, [pc, #148]	@ (800378c <TIM_Base_SetConfig+0xc0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <TIM_Base_SetConfig+0xb8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <TIM_Base_SetConfig+0xbc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <TIM_Base_SetConfig+0xc0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <TIM_Base_SetConfig+0xb8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800

08003790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0302 	bic.w	r3, r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <TIM_OC1_SetConfig+0xc8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10c      	bne.n	8003806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0308 	bic.w	r3, r3, #8
 80037f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a13      	ldr	r2, [pc, #76]	@ (8003858 <TIM_OC1_SetConfig+0xc8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00

0800385c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f023 0210 	bic.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	@ (800392c <TIM_OC2_SetConfig+0xd0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10d      	bne.n	80038d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a14      	ldr	r2, [pc, #80]	@ (800392c <TIM_OC2_SetConfig+0xd0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d113      	bne.n	8003908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00

08003930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <TIM_OC3_SetConfig+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10d      	bne.n	80039aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <TIM_OC3_SetConfig+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00

08003a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a9c <TIM_OC4_SetConfig+0x98>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d109      	bne.n	8003a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00

08003aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 030a 	bic.w	r3, r3, #10
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0210 	bic.w	r2, r3, #16
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	609a      	str	r2, [r3, #8]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e046      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d009      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a10      	ldr	r2, [pc, #64]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800

08003cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e03d      	b.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
	...

08003d74 <malloc>:
 8003d74:	4b02      	ldr	r3, [pc, #8]	@ (8003d80 <malloc+0xc>)
 8003d76:	4601      	mov	r1, r0
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f000 b82d 	b.w	8003dd8 <_malloc_r>
 8003d7e:	bf00      	nop
 8003d80:	20000014 	.word	0x20000014

08003d84 <free>:
 8003d84:	4b02      	ldr	r3, [pc, #8]	@ (8003d90 <free+0xc>)
 8003d86:	4601      	mov	r1, r0
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f000 b929 	b.w	8003fe0 <_free_r>
 8003d8e:	bf00      	nop
 8003d90:	20000014 	.word	0x20000014

08003d94 <sbrk_aligned>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4e0f      	ldr	r6, [pc, #60]	@ (8003dd4 <sbrk_aligned+0x40>)
 8003d98:	460c      	mov	r4, r1
 8003d9a:	6831      	ldr	r1, [r6, #0]
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	b911      	cbnz	r1, 8003da6 <sbrk_aligned+0x12>
 8003da0:	f000 f8e2 	bl	8003f68 <_sbrk_r>
 8003da4:	6030      	str	r0, [r6, #0]
 8003da6:	4621      	mov	r1, r4
 8003da8:	4628      	mov	r0, r5
 8003daa:	f000 f8dd 	bl	8003f68 <_sbrk_r>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	d103      	bne.n	8003dba <sbrk_aligned+0x26>
 8003db2:	f04f 34ff 	mov.w	r4, #4294967295
 8003db6:	4620      	mov	r0, r4
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	1cc4      	adds	r4, r0, #3
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d0f8      	beq.n	8003db6 <sbrk_aligned+0x22>
 8003dc4:	1a21      	subs	r1, r4, r0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 f8ce 	bl	8003f68 <_sbrk_r>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d1f2      	bne.n	8003db6 <sbrk_aligned+0x22>
 8003dd0:	e7ef      	b.n	8003db2 <sbrk_aligned+0x1e>
 8003dd2:	bf00      	nop
 8003dd4:	20000184 	.word	0x20000184

08003dd8 <_malloc_r>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	1ccd      	adds	r5, r1, #3
 8003dde:	f025 0503 	bic.w	r5, r5, #3
 8003de2:	3508      	adds	r5, #8
 8003de4:	2d0c      	cmp	r5, #12
 8003de6:	bf38      	it	cc
 8003de8:	250c      	movcc	r5, #12
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	4606      	mov	r6, r0
 8003dee:	db01      	blt.n	8003df4 <_malloc_r+0x1c>
 8003df0:	42a9      	cmp	r1, r5
 8003df2:	d904      	bls.n	8003dfe <_malloc_r+0x26>
 8003df4:	230c      	movs	r3, #12
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ed4 <_malloc_r+0xfc>
 8003e02:	f000 f869 	bl	8003ed8 <__malloc_lock>
 8003e06:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	bb44      	cbnz	r4, 8003e60 <_malloc_r+0x88>
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7ff ffbf 	bl	8003d94 <sbrk_aligned>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	4604      	mov	r4, r0
 8003e1a:	d158      	bne.n	8003ece <_malloc_r+0xf6>
 8003e1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e20:	4627      	mov	r7, r4
 8003e22:	2f00      	cmp	r7, #0
 8003e24:	d143      	bne.n	8003eae <_malloc_r+0xd6>
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d04b      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	eb04 0903 	add.w	r9, r4, r3
 8003e34:	f000 f898 	bl	8003f68 <_sbrk_r>
 8003e38:	4581      	cmp	r9, r0
 8003e3a:	d142      	bne.n	8003ec2 <_malloc_r+0xea>
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	1a6d      	subs	r5, r5, r1
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7ff ffa6 	bl	8003d94 <sbrk_aligned>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d03a      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	442b      	add	r3, r5
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	bb62      	cbnz	r2, 8003eb4 <_malloc_r+0xdc>
 8003e5a:	f8c8 7000 	str.w	r7, [r8]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xa8>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d420      	bmi.n	8003ea8 <_malloc_r+0xd0>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xc2>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f82f 	bl	8003ee4 <__malloc_unlock>
 8003e86:	f104 000b 	add.w	r0, r4, #11
 8003e8a:	1d23      	adds	r3, r4, #4
 8003e8c:	f020 0007 	bic.w	r0, r0, #7
 8003e90:	1ac2      	subs	r2, r0, r3
 8003e92:	bf1c      	itt	ne
 8003e94:	1a1b      	subne	r3, r3, r0
 8003e96:	50a3      	strne	r3, [r4, r2]
 8003e98:	e7af      	b.n	8003dfa <_malloc_r+0x22>
 8003e9a:	6862      	ldr	r2, [r4, #4]
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	bf0c      	ite	eq
 8003ea0:	f8c8 2000 	streq.w	r2, [r8]
 8003ea4:	605a      	strne	r2, [r3, #4]
 8003ea6:	e7eb      	b.n	8003e80 <_malloc_r+0xa8>
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	6864      	ldr	r4, [r4, #4]
 8003eac:	e7ae      	b.n	8003e0c <_malloc_r+0x34>
 8003eae:	463c      	mov	r4, r7
 8003eb0:	687f      	ldr	r7, [r7, #4]
 8003eb2:	e7b6      	b.n	8003e22 <_malloc_r+0x4a>
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d1fb      	bne.n	8003eb4 <_malloc_r+0xdc>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6053      	str	r3, [r2, #4]
 8003ec0:	e7de      	b.n	8003e80 <_malloc_r+0xa8>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	6033      	str	r3, [r6, #0]
 8003ec8:	f000 f80c 	bl	8003ee4 <__malloc_unlock>
 8003ecc:	e794      	b.n	8003df8 <_malloc_r+0x20>
 8003ece:	6005      	str	r5, [r0, #0]
 8003ed0:	e7d6      	b.n	8003e80 <_malloc_r+0xa8>
 8003ed2:	bf00      	nop
 8003ed4:	20000188 	.word	0x20000188

08003ed8 <__malloc_lock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	@ (8003ee0 <__malloc_lock+0x8>)
 8003eda:	f000 b87f 	b.w	8003fdc <__retarget_lock_acquire_recursive>
 8003ede:	bf00      	nop
 8003ee0:	200002c8 	.word	0x200002c8

08003ee4 <__malloc_unlock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__malloc_unlock+0x8>)
 8003ee6:	f000 b87a 	b.w	8003fde <__retarget_lock_release_recursive>
 8003eea:	bf00      	nop
 8003eec:	200002c8 	.word	0x200002c8

08003ef0 <sniprintf>:
 8003ef0:	b40c      	push	{r2, r3}
 8003ef2:	b530      	push	{r4, r5, lr}
 8003ef4:	4b17      	ldr	r3, [pc, #92]	@ (8003f54 <sniprintf+0x64>)
 8003ef6:	1e0c      	subs	r4, r1, #0
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	b09d      	sub	sp, #116	@ 0x74
 8003efc:	da08      	bge.n	8003f10 <sniprintf+0x20>
 8003efe:	238b      	movs	r3, #139	@ 0x8b
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	b01d      	add	sp, #116	@ 0x74
 8003f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f0c:	b002      	add	sp, #8
 8003f0e:	4770      	bx	lr
 8003f10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f18:	bf0c      	ite	eq
 8003f1a:	4623      	moveq	r3, r4
 8003f1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	9307      	str	r3, [sp, #28]
 8003f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f28:	9002      	str	r0, [sp, #8]
 8003f2a:	9006      	str	r0, [sp, #24]
 8003f2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f30:	4628      	mov	r0, r5
 8003f32:	ab21      	add	r3, sp, #132	@ 0x84
 8003f34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f36:	a902      	add	r1, sp, #8
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	f000 f8f5 	bl	8004128 <_svfiprintf_r>
 8003f3e:	1c43      	adds	r3, r0, #1
 8003f40:	bfbc      	itt	lt
 8003f42:	238b      	movlt	r3, #139	@ 0x8b
 8003f44:	602b      	strlt	r3, [r5, #0]
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	d0dd      	beq.n	8003f06 <sniprintf+0x16>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e7d9      	b.n	8003f06 <sniprintf+0x16>
 8003f52:	bf00      	nop
 8003f54:	20000014 	.word	0x20000014

08003f58 <memset>:
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4402      	add	r2, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <_sbrk_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	4d05      	ldr	r5, [pc, #20]	@ (8003f84 <_sbrk_r+0x1c>)
 8003f6e:	4604      	mov	r4, r0
 8003f70:	4608      	mov	r0, r1
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	f7fd f816 	bl	8000fa4 <_sbrk>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_sbrk_r+0x1a>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_sbrk_r+0x1a>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200002c4 	.word	0x200002c4

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	@ (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000014 	.word	0x20000014

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	@ (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	f000 fbba 	bl	800471c <_init>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	4d0a      	ldr	r5, [pc, #40]	@ (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	@ (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004f94 	.word	0x08004f94
 8003fd0:	08004f94 	.word	0x08004f94
 8003fd4:	08004f94 	.word	0x08004f94
 8003fd8:	08004f98 	.word	0x08004f98

08003fdc <__retarget_lock_acquire_recursive>:
 8003fdc:	4770      	bx	lr

08003fde <__retarget_lock_release_recursive>:
 8003fde:	4770      	bx	lr

08003fe0 <_free_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	d040      	beq.n	800406a <_free_r+0x8a>
 8003fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fec:	1f0c      	subs	r4, r1, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bfb8      	it	lt
 8003ff2:	18e4      	addlt	r4, r4, r3
 8003ff4:	f7ff ff70 	bl	8003ed8 <__malloc_lock>
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <_free_r+0x8c>)
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	b933      	cbnz	r3, 800400c <_free_r+0x2c>
 8003ffe:	6063      	str	r3, [r4, #4]
 8004000:	6014      	str	r4, [r2, #0]
 8004002:	4628      	mov	r0, r5
 8004004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004008:	f7ff bf6c 	b.w	8003ee4 <__malloc_unlock>
 800400c:	42a3      	cmp	r3, r4
 800400e:	d908      	bls.n	8004022 <_free_r+0x42>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	1821      	adds	r1, r4, r0
 8004014:	428b      	cmp	r3, r1
 8004016:	bf01      	itttt	eq
 8004018:	6819      	ldreq	r1, [r3, #0]
 800401a:	685b      	ldreq	r3, [r3, #4]
 800401c:	1809      	addeq	r1, r1, r0
 800401e:	6021      	streq	r1, [r4, #0]
 8004020:	e7ed      	b.n	8003ffe <_free_r+0x1e>
 8004022:	461a      	mov	r2, r3
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b10b      	cbz	r3, 800402c <_free_r+0x4c>
 8004028:	42a3      	cmp	r3, r4
 800402a:	d9fa      	bls.n	8004022 <_free_r+0x42>
 800402c:	6811      	ldr	r1, [r2, #0]
 800402e:	1850      	adds	r0, r2, r1
 8004030:	42a0      	cmp	r0, r4
 8004032:	d10b      	bne.n	800404c <_free_r+0x6c>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	4401      	add	r1, r0
 8004038:	1850      	adds	r0, r2, r1
 800403a:	4283      	cmp	r3, r0
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	d1e0      	bne.n	8004002 <_free_r+0x22>
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4408      	add	r0, r1
 8004046:	6010      	str	r0, [r2, #0]
 8004048:	6053      	str	r3, [r2, #4]
 800404a:	e7da      	b.n	8004002 <_free_r+0x22>
 800404c:	d902      	bls.n	8004054 <_free_r+0x74>
 800404e:	230c      	movs	r3, #12
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	e7d6      	b.n	8004002 <_free_r+0x22>
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	1821      	adds	r1, r4, r0
 8004058:	428b      	cmp	r3, r1
 800405a:	bf01      	itttt	eq
 800405c:	6819      	ldreq	r1, [r3, #0]
 800405e:	685b      	ldreq	r3, [r3, #4]
 8004060:	1809      	addeq	r1, r1, r0
 8004062:	6021      	streq	r1, [r4, #0]
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	6054      	str	r4, [r2, #4]
 8004068:	e7cb      	b.n	8004002 <_free_r+0x22>
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000188 	.word	0x20000188

08004070 <__ssputs_r>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	461f      	mov	r7, r3
 8004076:	688e      	ldr	r6, [r1, #8]
 8004078:	4682      	mov	sl, r0
 800407a:	42be      	cmp	r6, r7
 800407c:	460c      	mov	r4, r1
 800407e:	4690      	mov	r8, r2
 8004080:	680b      	ldr	r3, [r1, #0]
 8004082:	d82d      	bhi.n	80040e0 <__ssputs_r+0x70>
 8004084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004088:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800408c:	d026      	beq.n	80040dc <__ssputs_r+0x6c>
 800408e:	6965      	ldr	r5, [r4, #20]
 8004090:	6909      	ldr	r1, [r1, #16]
 8004092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004096:	eba3 0901 	sub.w	r9, r3, r1
 800409a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409e:	1c7b      	adds	r3, r7, #1
 80040a0:	444b      	add	r3, r9
 80040a2:	106d      	asrs	r5, r5, #1
 80040a4:	429d      	cmp	r5, r3
 80040a6:	bf38      	it	cc
 80040a8:	461d      	movcc	r5, r3
 80040aa:	0553      	lsls	r3, r2, #21
 80040ac:	d527      	bpl.n	80040fe <__ssputs_r+0x8e>
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7ff fe92 	bl	8003dd8 <_malloc_r>
 80040b4:	4606      	mov	r6, r0
 80040b6:	b360      	cbz	r0, 8004112 <__ssputs_r+0xa2>
 80040b8:	464a      	mov	r2, r9
 80040ba:	6921      	ldr	r1, [r4, #16]
 80040bc:	f000 faea 	bl	8004694 <memcpy>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	6126      	str	r6, [r4, #16]
 80040ce:	444e      	add	r6, r9
 80040d0:	6026      	str	r6, [r4, #0]
 80040d2:	463e      	mov	r6, r7
 80040d4:	6165      	str	r5, [r4, #20]
 80040d6:	eba5 0509 	sub.w	r5, r5, r9
 80040da:	60a5      	str	r5, [r4, #8]
 80040dc:	42be      	cmp	r6, r7
 80040de:	d900      	bls.n	80040e2 <__ssputs_r+0x72>
 80040e0:	463e      	mov	r6, r7
 80040e2:	4632      	mov	r2, r6
 80040e4:	4641      	mov	r1, r8
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	f000 faac 	bl	8004644 <memmove>
 80040ec:	2000      	movs	r0, #0
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	1b9b      	subs	r3, r3, r6
 80040f2:	60a3      	str	r3, [r4, #8]
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	4433      	add	r3, r6
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fe:	462a      	mov	r2, r5
 8004100:	f000 fad6 	bl	80046b0 <_realloc_r>
 8004104:	4606      	mov	r6, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d1e0      	bne.n	80040cc <__ssputs_r+0x5c>
 800410a:	4650      	mov	r0, sl
 800410c:	6921      	ldr	r1, [r4, #16]
 800410e:	f7ff ff67 	bl	8003fe0 <_free_r>
 8004112:	230c      	movs	r3, #12
 8004114:	f8ca 3000 	str.w	r3, [sl]
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	e7e9      	b.n	80040fa <__ssputs_r+0x8a>
	...

08004128 <_svfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4698      	mov	r8, r3
 800412e:	898b      	ldrh	r3, [r1, #12]
 8004130:	4607      	mov	r7, r0
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	460d      	mov	r5, r1
 8004136:	4614      	mov	r4, r2
 8004138:	b09d      	sub	sp, #116	@ 0x74
 800413a:	d510      	bpl.n	800415e <_svfiprintf_r+0x36>
 800413c:	690b      	ldr	r3, [r1, #16]
 800413e:	b973      	cbnz	r3, 800415e <_svfiprintf_r+0x36>
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	f7ff fe49 	bl	8003dd8 <_malloc_r>
 8004146:	6028      	str	r0, [r5, #0]
 8004148:	6128      	str	r0, [r5, #16]
 800414a:	b930      	cbnz	r0, 800415a <_svfiprintf_r+0x32>
 800414c:	230c      	movs	r3, #12
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b01d      	add	sp, #116	@ 0x74
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	2340      	movs	r3, #64	@ 0x40
 800415c:	616b      	str	r3, [r5, #20]
 800415e:	2300      	movs	r3, #0
 8004160:	9309      	str	r3, [sp, #36]	@ 0x24
 8004162:	2320      	movs	r3, #32
 8004164:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004168:	2330      	movs	r3, #48	@ 0x30
 800416a:	f04f 0901 	mov.w	r9, #1
 800416e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004172:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800430c <_svfiprintf_r+0x1e4>
 8004176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800417a:	4623      	mov	r3, r4
 800417c:	469a      	mov	sl, r3
 800417e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004182:	b10a      	cbz	r2, 8004188 <_svfiprintf_r+0x60>
 8004184:	2a25      	cmp	r2, #37	@ 0x25
 8004186:	d1f9      	bne.n	800417c <_svfiprintf_r+0x54>
 8004188:	ebba 0b04 	subs.w	fp, sl, r4
 800418c:	d00b      	beq.n	80041a6 <_svfiprintf_r+0x7e>
 800418e:	465b      	mov	r3, fp
 8004190:	4622      	mov	r2, r4
 8004192:	4629      	mov	r1, r5
 8004194:	4638      	mov	r0, r7
 8004196:	f7ff ff6b 	bl	8004070 <__ssputs_r>
 800419a:	3001      	adds	r0, #1
 800419c:	f000 80a7 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a2:	445a      	add	r2, fp
 80041a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a6:	f89a 3000 	ldrb.w	r3, [sl]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 809f 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ba:	f10a 0a01 	add.w	sl, sl, #1
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	9307      	str	r3, [sp, #28]
 80041c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80041c8:	4654      	mov	r4, sl
 80041ca:	2205      	movs	r2, #5
 80041cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d0:	484e      	ldr	r0, [pc, #312]	@ (800430c <_svfiprintf_r+0x1e4>)
 80041d2:	f000 fa51 	bl	8004678 <memchr>
 80041d6:	9a04      	ldr	r2, [sp, #16]
 80041d8:	b9d8      	cbnz	r0, 8004212 <_svfiprintf_r+0xea>
 80041da:	06d0      	lsls	r0, r2, #27
 80041dc:	bf44      	itt	mi
 80041de:	2320      	movmi	r3, #32
 80041e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e4:	0711      	lsls	r1, r2, #28
 80041e6:	bf44      	itt	mi
 80041e8:	232b      	movmi	r3, #43	@ 0x2b
 80041ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ee:	f89a 3000 	ldrb.w	r3, [sl]
 80041f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f4:	d015      	beq.n	8004222 <_svfiprintf_r+0xfa>
 80041f6:	4654      	mov	r4, sl
 80041f8:	2000      	movs	r0, #0
 80041fa:	f04f 0c0a 	mov.w	ip, #10
 80041fe:	9a07      	ldr	r2, [sp, #28]
 8004200:	4621      	mov	r1, r4
 8004202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004206:	3b30      	subs	r3, #48	@ 0x30
 8004208:	2b09      	cmp	r3, #9
 800420a:	d94b      	bls.n	80042a4 <_svfiprintf_r+0x17c>
 800420c:	b1b0      	cbz	r0, 800423c <_svfiprintf_r+0x114>
 800420e:	9207      	str	r2, [sp, #28]
 8004210:	e014      	b.n	800423c <_svfiprintf_r+0x114>
 8004212:	eba0 0308 	sub.w	r3, r0, r8
 8004216:	fa09 f303 	lsl.w	r3, r9, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	46a2      	mov	sl, r4
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	e7d2      	b.n	80041c8 <_svfiprintf_r+0xa0>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	9103      	str	r1, [sp, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfbb      	ittet	lt
 800422e:	425b      	neglt	r3, r3
 8004230:	f042 0202 	orrlt.w	r2, r2, #2
 8004234:	9307      	strge	r3, [sp, #28]
 8004236:	9307      	strlt	r3, [sp, #28]
 8004238:	bfb8      	it	lt
 800423a:	9204      	strlt	r2, [sp, #16]
 800423c:	7823      	ldrb	r3, [r4, #0]
 800423e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004240:	d10a      	bne.n	8004258 <_svfiprintf_r+0x130>
 8004242:	7863      	ldrb	r3, [r4, #1]
 8004244:	2b2a      	cmp	r3, #42	@ 0x2a
 8004246:	d132      	bne.n	80042ae <_svfiprintf_r+0x186>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	3402      	adds	r4, #2
 800424c:	1d1a      	adds	r2, r3, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	9203      	str	r2, [sp, #12]
 8004252:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004310 <_svfiprintf_r+0x1e8>
 800425c:	2203      	movs	r2, #3
 800425e:	4650      	mov	r0, sl
 8004260:	7821      	ldrb	r1, [r4, #0]
 8004262:	f000 fa09 	bl	8004678 <memchr>
 8004266:	b138      	cbz	r0, 8004278 <_svfiprintf_r+0x150>
 8004268:	2240      	movs	r2, #64	@ 0x40
 800426a:	9b04      	ldr	r3, [sp, #16]
 800426c:	eba0 000a 	sub.w	r0, r0, sl
 8004270:	4082      	lsls	r2, r0
 8004272:	4313      	orrs	r3, r2
 8004274:	3401      	adds	r4, #1
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427c:	2206      	movs	r2, #6
 800427e:	4825      	ldr	r0, [pc, #148]	@ (8004314 <_svfiprintf_r+0x1ec>)
 8004280:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004284:	f000 f9f8 	bl	8004678 <memchr>
 8004288:	2800      	cmp	r0, #0
 800428a:	d036      	beq.n	80042fa <_svfiprintf_r+0x1d2>
 800428c:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <_svfiprintf_r+0x1f0>)
 800428e:	bb1b      	cbnz	r3, 80042d8 <_svfiprintf_r+0x1b0>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	3307      	adds	r3, #7
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	3308      	adds	r3, #8
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429e:	4433      	add	r3, r6
 80042a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a2:	e76a      	b.n	800417a <_svfiprintf_r+0x52>
 80042a4:	460c      	mov	r4, r1
 80042a6:	2001      	movs	r0, #1
 80042a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ac:	e7a8      	b.n	8004200 <_svfiprintf_r+0xd8>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f04f 0c0a 	mov.w	ip, #10
 80042b4:	4619      	mov	r1, r3
 80042b6:	3401      	adds	r4, #1
 80042b8:	9305      	str	r3, [sp, #20]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c0:	3a30      	subs	r2, #48	@ 0x30
 80042c2:	2a09      	cmp	r2, #9
 80042c4:	d903      	bls.n	80042ce <_svfiprintf_r+0x1a6>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0c6      	beq.n	8004258 <_svfiprintf_r+0x130>
 80042ca:	9105      	str	r1, [sp, #20]
 80042cc:	e7c4      	b.n	8004258 <_svfiprintf_r+0x130>
 80042ce:	4604      	mov	r4, r0
 80042d0:	2301      	movs	r3, #1
 80042d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d6:	e7f0      	b.n	80042ba <_svfiprintf_r+0x192>
 80042d8:	ab03      	add	r3, sp, #12
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	462a      	mov	r2, r5
 80042de:	4638      	mov	r0, r7
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <_svfiprintf_r+0x1f4>)
 80042e2:	a904      	add	r1, sp, #16
 80042e4:	f3af 8000 	nop.w
 80042e8:	1c42      	adds	r2, r0, #1
 80042ea:	4606      	mov	r6, r0
 80042ec:	d1d6      	bne.n	800429c <_svfiprintf_r+0x174>
 80042ee:	89ab      	ldrh	r3, [r5, #12]
 80042f0:	065b      	lsls	r3, r3, #25
 80042f2:	f53f af2d 	bmi.w	8004150 <_svfiprintf_r+0x28>
 80042f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042f8:	e72c      	b.n	8004154 <_svfiprintf_r+0x2c>
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	462a      	mov	r2, r5
 8004300:	4638      	mov	r0, r7
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <_svfiprintf_r+0x1f4>)
 8004304:	a904      	add	r1, sp, #16
 8004306:	f000 f87d 	bl	8004404 <_printf_i>
 800430a:	e7ed      	b.n	80042e8 <_svfiprintf_r+0x1c0>
 800430c:	08004f5e 	.word	0x08004f5e
 8004310:	08004f64 	.word	0x08004f64
 8004314:	08004f68 	.word	0x08004f68
 8004318:	00000000 	.word	0x00000000
 800431c:	08004071 	.word	0x08004071

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4698      	mov	r8, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	4607      	mov	r7, r0
 800432e:	4293      	cmp	r3, r2
 8004330:	bfb8      	it	lt
 8004332:	4613      	movlt	r3, r2
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800433a:	460c      	mov	r4, r1
 800433c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc2b      	bgt.n	80043c0 <_printf_common+0xa0>
 8004368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	3b00      	subs	r3, #0
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d430      	bmi.n	80043da <_printf_common+0xba>
 8004378:	4641      	mov	r1, r8
 800437a:	4638      	mov	r0, r7
 800437c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004380:	47c8      	blx	r9
 8004382:	3001      	adds	r0, #1
 8004384:	d023      	beq.n	80043ce <_printf_common+0xae>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf14      	ite	ne
 8004392:	2500      	movne	r5, #0
 8004394:	6833      	ldreq	r3, [r6, #0]
 8004396:	f04f 0600 	mov.w	r6, #0
 800439a:	bf08      	it	eq
 800439c:	68e5      	ldreq	r5, [r4, #12]
 800439e:	f104 041a 	add.w	r4, r4, #26
 80043a2:	bf08      	it	eq
 80043a4:	1aed      	subeq	r5, r5, r3
 80043a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043aa:	bf08      	it	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfc4      	itt	gt
 80043b4:	1a9b      	subgt	r3, r3, r2
 80043b6:	18ed      	addgt	r5, r5, r3
 80043b8:	42b5      	cmp	r5, r6
 80043ba:	d11a      	bne.n	80043f2 <_printf_common+0xd2>
 80043bc:	2000      	movs	r0, #0
 80043be:	e008      	b.n	80043d2 <_printf_common+0xb2>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4652      	mov	r2, sl
 80043c4:	4641      	mov	r1, r8
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c8      	blx	r9
 80043ca:	3001      	adds	r0, #1
 80043cc:	d103      	bne.n	80043d6 <_printf_common+0xb6>
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	3501      	adds	r5, #1
 80043d8:	e7c1      	b.n	800435e <_printf_common+0x3e>
 80043da:	2030      	movs	r0, #48	@ 0x30
 80043dc:	18e1      	adds	r1, r4, r3
 80043de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e8:	4422      	add	r2, r4
 80043ea:	3302      	adds	r3, #2
 80043ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043f0:	e7c2      	b.n	8004378 <_printf_common+0x58>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4622      	mov	r2, r4
 80043f6:	4641      	mov	r1, r8
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c8      	blx	r9
 80043fc:	3001      	adds	r0, #1
 80043fe:	d0e6      	beq.n	80043ce <_printf_common+0xae>
 8004400:	3601      	adds	r6, #1
 8004402:	e7d9      	b.n	80043b8 <_printf_common+0x98>

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	4691      	mov	r9, r2
 800440c:	2f78      	cmp	r7, #120	@ 0x78
 800440e:	4680      	mov	r8, r0
 8004410:	460c      	mov	r4, r1
 8004412:	469a      	mov	sl, r3
 8004414:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	@ 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d3 	beq.w	80045cc <_printf_i+0x1c8>
 8004426:	2f58      	cmp	r7, #88	@ 0x58
 8004428:	f000 80ba 	beq.w	80045a0 <_printf_i+0x19c>
 800442c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	@ (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045b3 	.word	0x080045b3
 8004474:	080044db 	.word	0x080044db
 8004478:	0800456d 	.word	0x0800456d
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045d5 	.word	0x080045d5
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044db 	.word	0x080044db
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	08004575 	.word	0x08004575
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6032      	str	r2, [r6, #0]
 80044a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e09e      	b.n	80045ee <_printf_i+0x1ea>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	1d19      	adds	r1, r3, #4
 80044b6:	6031      	str	r1, [r6, #0]
 80044b8:	0606      	lsls	r6, r0, #24
 80044ba:	d501      	bpl.n	80044c0 <_printf_i+0xbc>
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	e003      	b.n	80044c8 <_printf_i+0xc4>
 80044c0:	0645      	lsls	r5, r0, #25
 80044c2:	d5fb      	bpl.n	80044bc <_printf_i+0xb8>
 80044c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	da03      	bge.n	80044d4 <_printf_i+0xd0>
 80044cc:	232d      	movs	r3, #45	@ 0x2d
 80044ce:	426d      	negs	r5, r5
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d4:	230a      	movs	r3, #10
 80044d6:	4859      	ldr	r0, [pc, #356]	@ (800463c <_printf_i+0x238>)
 80044d8:	e011      	b.n	80044fe <_printf_i+0xfa>
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	0608      	lsls	r0, r1, #24
 80044e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e4:	d402      	bmi.n	80044ec <_printf_i+0xe8>
 80044e6:	0649      	lsls	r1, r1, #25
 80044e8:	bf48      	it	mi
 80044ea:	b2ad      	uxthmi	r5, r5
 80044ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ee:	6033      	str	r3, [r6, #0]
 80044f0:	bf14      	ite	ne
 80044f2:	230a      	movne	r3, #10
 80044f4:	2308      	moveq	r3, #8
 80044f6:	4851      	ldr	r0, [pc, #324]	@ (800463c <_printf_i+0x238>)
 80044f8:	2100      	movs	r1, #0
 80044fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fe:	6866      	ldr	r6, [r4, #4]
 8004500:	2e00      	cmp	r6, #0
 8004502:	bfa8      	it	ge
 8004504:	6821      	ldrge	r1, [r4, #0]
 8004506:	60a6      	str	r6, [r4, #8]
 8004508:	bfa4      	itt	ge
 800450a:	f021 0104 	bicge.w	r1, r1, #4
 800450e:	6021      	strge	r1, [r4, #0]
 8004510:	b90d      	cbnz	r5, 8004516 <_printf_i+0x112>
 8004512:	2e00      	cmp	r6, #0
 8004514:	d04b      	beq.n	80045ae <_printf_i+0x1aa>
 8004516:	4616      	mov	r6, r2
 8004518:	fbb5 f1f3 	udiv	r1, r5, r3
 800451c:	fb03 5711 	mls	r7, r3, r1, r5
 8004520:	5dc7      	ldrb	r7, [r0, r7]
 8004522:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004526:	462f      	mov	r7, r5
 8004528:	42bb      	cmp	r3, r7
 800452a:	460d      	mov	r5, r1
 800452c:	d9f4      	bls.n	8004518 <_printf_i+0x114>
 800452e:	2b08      	cmp	r3, #8
 8004530:	d10b      	bne.n	800454a <_printf_i+0x146>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	07df      	lsls	r7, r3, #31
 8004536:	d508      	bpl.n	800454a <_printf_i+0x146>
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	6861      	ldr	r1, [r4, #4]
 800453c:	4299      	cmp	r1, r3
 800453e:	bfde      	ittt	le
 8004540:	2330      	movle	r3, #48	@ 0x30
 8004542:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004546:	f106 36ff 	addle.w	r6, r6, #4294967295
 800454a:	1b92      	subs	r2, r2, r6
 800454c:	6122      	str	r2, [r4, #16]
 800454e:	464b      	mov	r3, r9
 8004550:	4621      	mov	r1, r4
 8004552:	4640      	mov	r0, r8
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	aa03      	add	r2, sp, #12
 800455a:	f7ff fee1 	bl	8004320 <_printf_common>
 800455e:	3001      	adds	r0, #1
 8004560:	d14a      	bne.n	80045f8 <_printf_i+0x1f4>
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	b004      	add	sp, #16
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f043 0320 	orr.w	r3, r3, #32
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	2778      	movs	r7, #120	@ 0x78
 8004576:	4832      	ldr	r0, [pc, #200]	@ (8004640 <_printf_i+0x23c>)
 8004578:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	6831      	ldr	r1, [r6, #0]
 8004580:	061f      	lsls	r7, r3, #24
 8004582:	f851 5b04 	ldr.w	r5, [r1], #4
 8004586:	d402      	bmi.n	800458e <_printf_i+0x18a>
 8004588:	065f      	lsls	r7, r3, #25
 800458a:	bf48      	it	mi
 800458c:	b2ad      	uxthmi	r5, r5
 800458e:	6031      	str	r1, [r6, #0]
 8004590:	07d9      	lsls	r1, r3, #31
 8004592:	bf44      	itt	mi
 8004594:	f043 0320 	orrmi.w	r3, r3, #32
 8004598:	6023      	strmi	r3, [r4, #0]
 800459a:	b11d      	cbz	r5, 80045a4 <_printf_i+0x1a0>
 800459c:	2310      	movs	r3, #16
 800459e:	e7ab      	b.n	80044f8 <_printf_i+0xf4>
 80045a0:	4826      	ldr	r0, [pc, #152]	@ (800463c <_printf_i+0x238>)
 80045a2:	e7e9      	b.n	8004578 <_printf_i+0x174>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	e7f6      	b.n	800459c <_printf_i+0x198>
 80045ae:	4616      	mov	r6, r2
 80045b0:	e7bd      	b.n	800452e <_printf_i+0x12a>
 80045b2:	6833      	ldr	r3, [r6, #0]
 80045b4:	6825      	ldr	r5, [r4, #0]
 80045b6:	1d18      	adds	r0, r3, #4
 80045b8:	6961      	ldr	r1, [r4, #20]
 80045ba:	6030      	str	r0, [r6, #0]
 80045bc:	062e      	lsls	r6, r5, #24
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	d501      	bpl.n	80045c6 <_printf_i+0x1c2>
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	e002      	b.n	80045cc <_printf_i+0x1c8>
 80045c6:	0668      	lsls	r0, r5, #25
 80045c8:	d5fb      	bpl.n	80045c2 <_printf_i+0x1be>
 80045ca:	8019      	strh	r1, [r3, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	4616      	mov	r6, r2
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	e7bc      	b.n	800454e <_printf_i+0x14a>
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	2100      	movs	r1, #0
 80045d8:	1d1a      	adds	r2, r3, #4
 80045da:	6032      	str	r2, [r6, #0]
 80045dc:	681e      	ldr	r6, [r3, #0]
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 f849 	bl	8004678 <memchr>
 80045e6:	b108      	cbz	r0, 80045ec <_printf_i+0x1e8>
 80045e8:	1b80      	subs	r0, r0, r6
 80045ea:	6060      	str	r0, [r4, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	6123      	str	r3, [r4, #16]
 80045f0:	2300      	movs	r3, #0
 80045f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f6:	e7aa      	b.n	800454e <_printf_i+0x14a>
 80045f8:	4632      	mov	r2, r6
 80045fa:	4649      	mov	r1, r9
 80045fc:	4640      	mov	r0, r8
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	47d0      	blx	sl
 8004602:	3001      	adds	r0, #1
 8004604:	d0ad      	beq.n	8004562 <_printf_i+0x15e>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	079b      	lsls	r3, r3, #30
 800460a:	d413      	bmi.n	8004634 <_printf_i+0x230>
 800460c:	68e0      	ldr	r0, [r4, #12]
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	4298      	cmp	r0, r3
 8004612:	bfb8      	it	lt
 8004614:	4618      	movlt	r0, r3
 8004616:	e7a6      	b.n	8004566 <_printf_i+0x162>
 8004618:	2301      	movs	r3, #1
 800461a:	4632      	mov	r2, r6
 800461c:	4649      	mov	r1, r9
 800461e:	4640      	mov	r0, r8
 8004620:	47d0      	blx	sl
 8004622:	3001      	adds	r0, #1
 8004624:	d09d      	beq.n	8004562 <_printf_i+0x15e>
 8004626:	3501      	adds	r5, #1
 8004628:	68e3      	ldr	r3, [r4, #12]
 800462a:	9903      	ldr	r1, [sp, #12]
 800462c:	1a5b      	subs	r3, r3, r1
 800462e:	42ab      	cmp	r3, r5
 8004630:	dcf2      	bgt.n	8004618 <_printf_i+0x214>
 8004632:	e7eb      	b.n	800460c <_printf_i+0x208>
 8004634:	2500      	movs	r5, #0
 8004636:	f104 0619 	add.w	r6, r4, #25
 800463a:	e7f5      	b.n	8004628 <_printf_i+0x224>
 800463c:	08004f6f 	.word	0x08004f6f
 8004640:	08004f80 	.word	0x08004f80

08004644 <memmove>:
 8004644:	4288      	cmp	r0, r1
 8004646:	b510      	push	{r4, lr}
 8004648:	eb01 0402 	add.w	r4, r1, r2
 800464c:	d902      	bls.n	8004654 <memmove+0x10>
 800464e:	4284      	cmp	r4, r0
 8004650:	4623      	mov	r3, r4
 8004652:	d807      	bhi.n	8004664 <memmove+0x20>
 8004654:	1e43      	subs	r3, r0, #1
 8004656:	42a1      	cmp	r1, r4
 8004658:	d008      	beq.n	800466c <memmove+0x28>
 800465a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004662:	e7f8      	b.n	8004656 <memmove+0x12>
 8004664:	4601      	mov	r1, r0
 8004666:	4402      	add	r2, r0
 8004668:	428a      	cmp	r2, r1
 800466a:	d100      	bne.n	800466e <memmove+0x2a>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004676:	e7f7      	b.n	8004668 <memmove+0x24>

08004678 <memchr>:
 8004678:	4603      	mov	r3, r0
 800467a:	b510      	push	{r4, lr}
 800467c:	b2c9      	uxtb	r1, r1
 800467e:	4402      	add	r2, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	4618      	mov	r0, r3
 8004684:	d101      	bne.n	800468a <memchr+0x12>
 8004686:	2000      	movs	r0, #0
 8004688:	e003      	b.n	8004692 <memchr+0x1a>
 800468a:	7804      	ldrb	r4, [r0, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	428c      	cmp	r4, r1
 8004690:	d1f6      	bne.n	8004680 <memchr+0x8>
 8004692:	bd10      	pop	{r4, pc}

08004694 <memcpy>:
 8004694:	440a      	add	r2, r1
 8004696:	4291      	cmp	r1, r2
 8004698:	f100 33ff 	add.w	r3, r0, #4294967295
 800469c:	d100      	bne.n	80046a0 <memcpy+0xc>
 800469e:	4770      	bx	lr
 80046a0:	b510      	push	{r4, lr}
 80046a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a6:	4291      	cmp	r1, r2
 80046a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ac:	d1f9      	bne.n	80046a2 <memcpy+0xe>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <_realloc_r>:
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b4:	4680      	mov	r8, r0
 80046b6:	4615      	mov	r5, r2
 80046b8:	460c      	mov	r4, r1
 80046ba:	b921      	cbnz	r1, 80046c6 <_realloc_r+0x16>
 80046bc:	4611      	mov	r1, r2
 80046be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	f7ff bb89 	b.w	8003dd8 <_malloc_r>
 80046c6:	b92a      	cbnz	r2, 80046d4 <_realloc_r+0x24>
 80046c8:	f7ff fc8a 	bl	8003fe0 <_free_r>
 80046cc:	2400      	movs	r4, #0
 80046ce:	4620      	mov	r0, r4
 80046d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d4:	f000 f81a 	bl	800470c <_malloc_usable_size_r>
 80046d8:	4285      	cmp	r5, r0
 80046da:	4606      	mov	r6, r0
 80046dc:	d802      	bhi.n	80046e4 <_realloc_r+0x34>
 80046de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046e2:	d8f4      	bhi.n	80046ce <_realloc_r+0x1e>
 80046e4:	4629      	mov	r1, r5
 80046e6:	4640      	mov	r0, r8
 80046e8:	f7ff fb76 	bl	8003dd8 <_malloc_r>
 80046ec:	4607      	mov	r7, r0
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d0ec      	beq.n	80046cc <_realloc_r+0x1c>
 80046f2:	42b5      	cmp	r5, r6
 80046f4:	462a      	mov	r2, r5
 80046f6:	4621      	mov	r1, r4
 80046f8:	bf28      	it	cs
 80046fa:	4632      	movcs	r2, r6
 80046fc:	f7ff ffca 	bl	8004694 <memcpy>
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f7ff fc6c 	bl	8003fe0 <_free_r>
 8004708:	463c      	mov	r4, r7
 800470a:	e7e0      	b.n	80046ce <_realloc_r+0x1e>

0800470c <_malloc_usable_size_r>:
 800470c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004710:	1f18      	subs	r0, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfbc      	itt	lt
 8004716:	580b      	ldrlt	r3, [r1, r0]
 8004718:	18c0      	addlt	r0, r0, r3
 800471a:	4770      	bx	lr

0800471c <_init>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr

08004728 <_fini>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr
