
bluepill_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08002c5c  08002c5c  00003c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003600  08003600  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  08003600  08003600  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003600  08003600  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003608  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000064  0800366c  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800366c  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000766c  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3d  00000000  00000000  0000c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001772c  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a5a6  00000000  00000000  00026314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00083e30  00000000  00000000  000308ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b46ea  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000660  00000000  00000000  000b472d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000245c  00000000  00000000  000b4d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b71ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c44 	.word	0x08002c44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002c44 	.word	0x08002c44

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f83e 	bl	80011d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8000154:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000158:	f001 f89c 	bl	8001294 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f810 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f8c0 	bl	80002e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000164:	f000 f86a 	bl	800023c <MX_RTC_Init>
  MX_SPI1_Init();
 8000168:	f000 f884 	bl	8000274 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800016c:	f000 fa12 	bl	8000594 <ST7735_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ST7735_Test();
 8000170:	f000 fd26 	bl	8000bc0 <ST7735_Test>
	HAL_Delay(500);
 8000174:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000178:	f001 f88c 	bl	8001294 <HAL_Delay>
	ST7735_Test();
 800017c:	bf00      	nop
 800017e:	e7f7      	b.n	8000170 <main+0x24>

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b094      	sub	sp, #80	@ 0x50
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800018a:	2228      	movs	r2, #40	@ 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f002 fccc 	bl	8002b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	f107 0314 	add.w	r3, r7, #20
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001b0:	2305      	movs	r3, #5
 80001b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c6:	2302      	movs	r3, #2
 80001c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fb0a 	bl	80017f4 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001e6:	f000 f8e9 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fd76 	bl	8001cf8 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000212:	f000 f8d3 	bl	80003bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000216:	2301      	movs	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800021a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800021e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fee2 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800022e:	f000 f8c5 	bl	80003bc <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3750      	adds	r7, #80	@ 0x50
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <MX_RTC_Init+0x30>)
 8000242:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <MX_RTC_Init+0x34>)
 8000244:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <MX_RTC_Init+0x30>)
 8000248:	f04f 32ff 	mov.w	r2, #4294967295
 800024c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800024e:	4b07      	ldr	r3, [pc, #28]	@ (800026c <MX_RTC_Init+0x30>)
 8000250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000254:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000256:	4805      	ldr	r0, [pc, #20]	@ (800026c <MX_RTC_Init+0x30>)
 8000258:	f002 f834 	bl	80022c4 <HAL_RTC_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000262:	f000 f8ab 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000080 	.word	0x20000080
 8000270:	40002800 	.word	0x40002800

08000274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000278:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <MX_SPI1_Init+0x68>)
 800027a:	4a19      	ldr	r2, [pc, #100]	@ (80002e0 <MX_SPI1_Init+0x6c>)
 800027c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800027e:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <MX_SPI1_Init+0x68>)
 8000280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000286:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <MX_SPI1_Init+0x68>)
 8000288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800028c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800028e:	4b13      	ldr	r3, [pc, #76]	@ (80002dc <MX_SPI1_Init+0x68>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_SPI1_Init+0x68>)
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_SPI1_Init+0x68>)
 800029c:	2200      	movs	r2, #0
 800029e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002aa:	2208      	movs	r2, #8
 80002ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002bc:	2200      	movs	r2, #0
 80002be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002c2:	220a      	movs	r2, #10
 80002c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_SPI1_Init+0x68>)
 80002c8:	f002 f905 	bl	80024d6 <HAL_SPI_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002d2:	f000 f873 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000094 	.word	0x20000094
 80002e0:	40013000 	.word	0x40013000

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b2d      	ldr	r3, [pc, #180]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a26      	ldr	r2, [pc, #152]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b21      	ldr	r3, [pc, #132]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a20      	ldr	r2, [pc, #128]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1b      	ldr	r3, [pc, #108]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1a      	ldr	r2, [pc, #104]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2102      	movs	r1, #2
 800035c:	4815      	ldr	r0, [pc, #84]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 800035e:	f001 fa25 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8000368:	4813      	ldr	r0, [pc, #76]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 800036a:	f001 fa1f 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800036e:	2302      	movs	r3, #2
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	480b      	ldr	r0, [pc, #44]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 8000386:	f001 f88d 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9;
 800038a:	f44f 730a 	mov.w	r3, #552	@ 0x228
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2302      	movs	r3, #2
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 80003a4:	f001 f87e 	bl	80014a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40010c00 	.word	0x40010c00

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <Error_Handler+0x8>

080003c8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2110      	movs	r1, #16
 80003d0:	4802      	ldr	r0, [pc, #8]	@ (80003dc <ST7735_Select+0x14>)
 80003d2:	f001 f9eb 	bl	80017ac <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010800 	.word	0x40010800

080003e0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2110      	movs	r1, #16
 80003e8:	4802      	ldr	r0, [pc, #8]	@ (80003f4 <ST7735_Unselect+0x14>)
 80003ea:	f001 f9df 	bl	80017ac <HAL_GPIO_WritePin>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800

080003f8 <ST7735_Reset>:

static void ST7735_Reset() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2108      	movs	r1, #8
 8000400:	4806      	ldr	r0, [pc, #24]	@ (800041c <ST7735_Reset+0x24>)
 8000402:	f001 f9d3 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000406:	2005      	movs	r0, #5
 8000408:	f000 ff44 	bl	8001294 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2108      	movs	r1, #8
 8000410:	4802      	ldr	r0, [pc, #8]	@ (800041c <ST7735_Reset+0x24>)
 8000412:	f001 f9cb 	bl	80017ac <HAL_GPIO_WritePin>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010c00 	.word	0x40010c00

08000420 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	// sizeof(cmd) or 1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2120      	movs	r1, #32
 800042e:	4807      	ldr	r0, [pc, #28]	@ (800044c <ST7735_WriteCommand+0x2c>)
 8000430:	f001 f9bc 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000434:	1df9      	adds	r1, r7, #7
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	2201      	movs	r2, #1
 800043c:	4804      	ldr	r0, [pc, #16]	@ (8000450 <ST7735_WriteCommand+0x30>)
 800043e:	f002 f8ce 	bl	80025de <HAL_SPI_Transmit>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010c00 	.word	0x40010c00
 8000450:	20000094 	.word	0x20000094

08000454 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2120      	movs	r1, #32
 8000462:	4807      	ldr	r0, [pc, #28]	@ (8000480 <ST7735_WriteData+0x2c>)
 8000464:	f001 f9a2 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	b29a      	uxth	r2, r3
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	4804      	ldr	r0, [pc, #16]	@ (8000484 <ST7735_WriteData+0x30>)
 8000474:	f002 f8b3 	bl	80025de <HAL_SPI_Transmit>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010c00 	.word	0x40010c00
 8000484:	20000094 	.word	0x20000094

08000488 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	607a      	str	r2, [r7, #4]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800049a:	e034      	b.n	8000506 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffb9 	bl	8000420 <ST7735_WriteCommand>

        numArgs = *addr++;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80004b8:	7abb      	ldrb	r3, [r7, #10]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004c0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80004c2:	7abb      	ldrb	r3, [r7, #10]
 80004c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80004c8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80004ca:	7abb      	ldrb	r3, [r7, #10]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d008      	beq.n	80004e2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80004d0:	7abb      	ldrb	r3, [r7, #10]
 80004d2:	4619      	mov	r1, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ffbd 	bl	8000454 <ST7735_WriteData>
            addr += numArgs;
 80004da:	7abb      	ldrb	r3, [r7, #10]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4413      	add	r3, r2
 80004e0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80004e2:	89bb      	ldrh	r3, [r7, #12]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00e      	beq.n	8000506 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80004f2:	89bb      	ldrh	r3, [r7, #12]
 80004f4:	2bff      	cmp	r3, #255	@ 0xff
 80004f6:	d102      	bne.n	80004fe <ST7735_ExecuteCommandList+0x76>
 80004f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004fc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80004fe:	89bb      	ldrh	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fec7 	bl	8001294 <HAL_Delay>
    while(numCommands--) {
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	73fa      	strb	r2, [r7, #15]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1c5      	bne.n	800049c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800051a:	b590      	push	{r4, r7, lr}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	4604      	mov	r4, r0
 8000522:	4608      	mov	r0, r1
 8000524:	4611      	mov	r1, r2
 8000526:	461a      	mov	r2, r3
 8000528:	4623      	mov	r3, r4
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4603      	mov	r3, r0
 800052e:	71bb      	strb	r3, [r7, #6]
 8000530:	460b      	mov	r3, r1
 8000532:	717b      	strb	r3, [r7, #5]
 8000534:	4613      	mov	r3, r2
 8000536:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000538:	202a      	movs	r0, #42	@ 0x2a
 800053a:	f7ff ff71 	bl	8000420 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800053e:	2300      	movs	r3, #0
 8000540:	733b      	strb	r3, [r7, #12]
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3302      	adds	r3, #2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	737b      	strb	r3, [r7, #13]
 800054a:	2300      	movs	r3, #0
 800054c:	73bb      	strb	r3, [r7, #14]
 800054e:	797b      	ldrb	r3, [r7, #5]
 8000550:	3302      	adds	r3, #2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2104      	movs	r1, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff79 	bl	8000454 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000562:	202b      	movs	r0, #43	@ 0x2b
 8000564:	f7ff ff5c 	bl	8000420 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	3303      	adds	r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000570:	793b      	ldrb	r3, [r7, #4]
 8000572:	3303      	adds	r3, #3
 8000574:	b2db      	uxtb	r3, r3
 8000576:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2104      	movs	r1, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff68 	bl	8000454 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000584:	202c      	movs	r0, #44	@ 0x2c
 8000586:	f7ff ff4b 	bl	8000420 <ST7735_WriteCommand>
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}
	...

08000594 <ST7735_Init>:

void ST7735_Init() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000598:	f7ff ff16 	bl	80003c8 <ST7735_Select>
    ST7735_Reset();
 800059c:	f7ff ff2c 	bl	80003f8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80005a0:	4806      	ldr	r0, [pc, #24]	@ (80005bc <ST7735_Init+0x28>)
 80005a2:	f7ff ff71 	bl	8000488 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <ST7735_Init+0x2c>)
 80005a8:	f7ff ff6e 	bl	8000488 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <ST7735_Init+0x30>)
 80005ae:	f7ff ff6b 	bl	8000488 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80005b2:	f7ff ff15 	bl	80003e0 <ST7735_Unselect>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	08003548 	.word	0x08003548
 80005c0:	08003584 	.word	0x08003584
 80005c4:	08003594 	.word	0x08003594

080005c8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80005de:	d823      	bhi.n	8000628 <ST7735_DrawPixel+0x60>
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005e4:	d820      	bhi.n	8000628 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 80005e6:	f7ff feef 	bl	80003c8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	b2d9      	uxtb	r1, r3
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	3301      	adds	r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	3301      	adds	r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f7ff ff8a 	bl	800051a <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000606:	887b      	ldrh	r3, [r7, #2]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	733b      	strb	r3, [r7, #12]
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2102      	movs	r1, #2
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff19 	bl	8000454 <ST7735_WriteData>

    ST7735_Unselect();
 8000622:	f7ff fedd 	bl	80003e0 <ST7735_Unselect>
 8000626:	e000      	b.n	800062a <ST7735_DrawPixel+0x62>
        return;
 8000628:	bf00      	nop
}
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <ST7735_DrawLine>:

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0);
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	bfb8      	it	lt
 8000658:	425b      	neglt	r3, r3
 800065a:	82bb      	strh	r3, [r7, #20]
    int16_t dy = -abs(y1 - y0);
 800065c:	883a      	ldrh	r2, [r7, #0]
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	bfb8      	it	lt
 8000666:	425b      	neglt	r3, r3
 8000668:	b29b      	uxth	r3, r3
 800066a:	425b      	negs	r3, r3
 800066c:	b29b      	uxth	r3, r3
 800066e:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1;
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	429a      	cmp	r2, r3
 8000676:	d201      	bcs.n	800067c <ST7735_DrawLine+0x4c>
 8000678:	2301      	movs	r3, #1
 800067a:	e001      	b.n	8000680 <ST7735_DrawLine+0x50>
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	823b      	strh	r3, [r7, #16]
    int16_t sy = (y0 < y1) ? 1 : -1;
 8000682:	88ba      	ldrh	r2, [r7, #4]
 8000684:	883b      	ldrh	r3, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d201      	bcs.n	800068e <ST7735_DrawLine+0x5e>
 800068a:	2301      	movs	r3, #1
 800068c:	e001      	b.n	8000692 <ST7735_DrawLine+0x62>
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx + dy;
 8000694:	8aba      	ldrh	r2, [r7, #20]
 8000696:	8a7b      	ldrh	r3, [r7, #18]
 8000698:	4413      	add	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	82fb      	strh	r3, [r7, #22]
    int16_t e2;

    while (1) {
        ST7735_DrawPixel(x0, y0, color);
 800069e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80006a0:	88b9      	ldrh	r1, [r7, #4]
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff8f 	bl	80005c8 <ST7735_DrawPixel>
        if (x0 == x1 && y0 == y1) break;
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d103      	bne.n	80006ba <ST7735_DrawLine+0x8a>
 80006b2:	88ba      	ldrh	r2, [r7, #4]
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d022      	beq.n	8000700 <ST7735_DrawLine+0xd0>
        e2 = 2 * err;
 80006ba:	8afb      	ldrh	r3, [r7, #22]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	81bb      	strh	r3, [r7, #12]
        if (e2 >= dy) {
 80006c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80006c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	db08      	blt.n	80006e0 <ST7735_DrawLine+0xb0>
            err += dy;
 80006ce:	8afa      	ldrh	r2, [r7, #22]
 80006d0:	8a7b      	ldrh	r3, [r7, #18]
 80006d2:	4413      	add	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80006d8:	8a3a      	ldrh	r2, [r7, #16]
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	4413      	add	r3, r2
 80006de:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 80006e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80006e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dcd8      	bgt.n	800069e <ST7735_DrawLine+0x6e>
            err += dx;
 80006ec:	8afa      	ldrh	r2, [r7, #22]
 80006ee:	8abb      	ldrh	r3, [r7, #20]
 80006f0:	4413      	add	r3, r2
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80006f6:	89fa      	ldrh	r2, [r7, #14]
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	80bb      	strh	r3, [r7, #4]
        ST7735_DrawPixel(x0, y0, color);
 80006fe:	e7ce      	b.n	800069e <ST7735_DrawLine+0x6e>
        if (x0 == x1 && y0 == y1) break;
 8000700:	bf00      	nop
        }
    }
}
 8000702:	bf00      	nop
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}

0800070a <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800070a:	b082      	sub	sp, #8
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
 8000714:	4603      	mov	r3, r0
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	70fb      	strb	r3, [r7, #3]
   uint32_t i, b, j;

   ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	b2d8      	uxtb	r0, r3
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	b2d9      	uxtb	r1, r3
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000730:	4413      	add	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	3b01      	subs	r3, #1
 8000736:	b2dc      	uxtb	r4, r3
 8000738:	88bb      	ldrh	r3, [r7, #4]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000740:	4413      	add	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	3b01      	subs	r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4622      	mov	r2, r4
 800074a:	f7ff fee6 	bl	800051a <ST7735_SetAddressWindow>

   for(i = 0; i < font.height; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e043      	b.n	80007dc <ST7735_WriteChar+0xd2>
       b = font.data[(ch - 32) * font.height + i];
 8000754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	3b20      	subs	r3, #32
 800075a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4619      	mov	r1, r3
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	440b      	add	r3, r1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	617b      	str	r3, [r7, #20]
       for(j = 0; j < font.width; j++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e029      	b.n	80007ca <ST7735_WriteChar+0xc0>
           if((b << j) & 0x8000)  {
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00e      	beq.n	80007a4 <ST7735_WriteChar+0x9a>
               uint8_t data[] = { color >> 8, color & 0xFF };
 8000786:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	743b      	strb	r3, [r7, #16]
 8000790:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000792:	b2db      	uxtb	r3, r3
 8000794:	747b      	strb	r3, [r7, #17]
               ST7735_WriteData(data, sizeof(data));
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2102      	movs	r1, #2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe59 	bl	8000454 <ST7735_WriteData>
 80007a2:	e00f      	b.n	80007c4 <ST7735_WriteChar+0xba>
           } else {
               uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80007a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	733b      	strb	r3, [r7, #12]
 80007b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
               ST7735_WriteData(data, sizeof(data));
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe48 	bl	8000454 <ST7735_WriteData>
       for(j = 0; j < font.width; j++) {
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	3301      	adds	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80007ce:	461a      	mov	r2, r3
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d3cf      	bcc.n	8000776 <ST7735_WriteChar+0x6c>
   for(i = 0; i < font.height; i++) {
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3301      	adds	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80007e0:	461a      	mov	r2, r3
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d3b5      	bcc.n	8000754 <ST7735_WriteChar+0x4a>
           }
       }
   }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3724      	adds	r7, #36	@ 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr

080007f8 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80007f8:	b082      	sub	sp, #8
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af04      	add	r7, sp, #16
 8000800:	603a      	str	r2, [r7, #0]
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
 8000808:	460b      	mov	r3, r1
 800080a:	80bb      	strh	r3, [r7, #4]
   ST7735_Select();
 800080c:	f7ff fddc 	bl	80003c8 <ST7735_Select>

   while(*str) {
 8000810:	e02d      	b.n	800086e <ST7735_WriteString+0x76>
       if(x + font.width >= ST7735_WIDTH) {
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	7d3a      	ldrb	r2, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	2b7f      	cmp	r3, #127	@ 0x7f
 800081a:	dd13      	ble.n	8000844 <ST7735_WriteString+0x4c>
           x = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	80fb      	strh	r3, [r7, #6]
           y += font.height;
 8000820:	7d7b      	ldrb	r3, [r7, #21]
 8000822:	461a      	mov	r2, r3
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	80bb      	strh	r3, [r7, #4]
           if(y + font.height >= ST7735_HEIGHT) {
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	7d7a      	ldrb	r2, [r7, #21]
 800082e:	4413      	add	r3, r2
 8000830:	2b7f      	cmp	r3, #127	@ 0x7f
 8000832:	dc21      	bgt.n	8000878 <ST7735_WriteString+0x80>
               break;
           }

           if(*str == ' ') {
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b20      	cmp	r3, #32
 800083a:	d103      	bne.n	8000844 <ST7735_WriteString+0x4c>
               // skip spaces in the beginning of the new line
               str++;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	603b      	str	r3, [r7, #0]
               continue;
 8000842:	e014      	b.n	800086e <ST7735_WriteString+0x76>
           }
       }

       ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	88b9      	ldrh	r1, [r7, #4]
 800084a:	88f8      	ldrh	r0, [r7, #6]
 800084c:	8c3b      	ldrh	r3, [r7, #32]
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	8bbb      	ldrh	r3, [r7, #28]
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f7ff ff56 	bl	800070a <ST7735_WriteChar>
       x += font.width;
 800085e:	7d3b      	ldrb	r3, [r7, #20]
 8000860:	461a      	mov	r2, r3
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4413      	add	r3, r2
 8000866:	80fb      	strh	r3, [r7, #6]
       str++;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	603b      	str	r3, [r7, #0]
   while(*str) {
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1cd      	bne.n	8000812 <ST7735_WriteString+0x1a>
 8000876:	e000      	b.n	800087a <ST7735_WriteString+0x82>
               break;
 8000878:	bf00      	nop
   }

   ST7735_Unselect();
 800087a:	f7ff fdb1 	bl	80003e0 <ST7735_Unselect>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000888:	b002      	add	sp, #8
 800088a:	4770      	bx	lr

0800088c <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	4604      	mov	r4, r0
 8000894:	4608      	mov	r0, r1
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	4623      	mov	r3, r4
 800089c:	80fb      	strh	r3, [r7, #6]
 800089e:	4603      	mov	r3, r0
 80008a0:	80bb      	strh	r3, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	803b      	strh	r3, [r7, #0]
    // Draw horizontal linesST7735_DrawRectangle
    for (uint16_t i = 0; i < w; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	81fb      	strh	r3, [r7, #14]
 80008ae:	e019      	b.n	80008e4 <ST7735_DrawRectangle+0x58>
        ST7735_DrawPixel(x + i, y, color);
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	4413      	add	r3, r2
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	8c3a      	ldrh	r2, [r7, #32]
 80008ba:	88b9      	ldrh	r1, [r7, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe83 	bl	80005c8 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + i, y + h - 1, color);
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	4413      	add	r3, r2
 80008c8:	b298      	uxth	r0, r3
 80008ca:	88ba      	ldrh	r2, [r7, #4]
 80008cc:	883b      	ldrh	r3, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	3b01      	subs	r3, #1
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	8c3a      	ldrh	r2, [r7, #32]
 80008d8:	4619      	mov	r1, r3
 80008da:	f7ff fe75 	bl	80005c8 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < w; i++) {
 80008de:	89fb      	ldrh	r3, [r7, #14]
 80008e0:	3301      	adds	r3, #1
 80008e2:	81fb      	strh	r3, [r7, #14]
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d3e1      	bcc.n	80008b0 <ST7735_DrawRectangle+0x24>
    }

    // Draw vertical lines
    for (uint16_t i = 0; i < h; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	81bb      	strh	r3, [r7, #12]
 80008f0:	e019      	b.n	8000926 <ST7735_DrawRectangle+0x9a>
        ST7735_DrawPixel(x, y + i, color);
 80008f2:	88ba      	ldrh	r2, [r7, #4]
 80008f4:	89bb      	ldrh	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	b299      	uxth	r1, r3
 80008fa:	8c3a      	ldrh	r2, [r7, #32]
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe62 	bl	80005c8 <ST7735_DrawPixel>
        ST7735_DrawPixel(x + w - 1, y + i, color);
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	3b01      	subs	r3, #1
 800090e:	b298      	uxth	r0, r3
 8000910:	88ba      	ldrh	r2, [r7, #4]
 8000912:	89bb      	ldrh	r3, [r7, #12]
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	8c3a      	ldrh	r2, [r7, #32]
 800091a:	4619      	mov	r1, r3
 800091c:	f7ff fe54 	bl	80005c8 <ST7735_DrawPixel>
    for (uint16_t i = 0; i < h; i++) {
 8000920:	89bb      	ldrh	r3, [r7, #12]
 8000922:	3301      	adds	r3, #1
 8000924:	81bb      	strh	r3, [r7, #12]
 8000926:	89ba      	ldrh	r2, [r7, #12]
 8000928:	883b      	ldrh	r3, [r7, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d3e1      	bcc.n	80008f2 <ST7735_DrawRectangle+0x66>
    }
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}

08000938 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4604      	mov	r4, r0
 8000940:	4608      	mov	r0, r1
 8000942:	4611      	mov	r1, r2
 8000944:	461a      	mov	r2, r3
 8000946:	4623      	mov	r3, r4
 8000948:	80fb      	strh	r3, [r7, #6]
 800094a:	4603      	mov	r3, r0
 800094c:	80bb      	strh	r3, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	807b      	strh	r3, [r7, #2]
 8000952:	4613      	mov	r3, r2
 8000954:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	2b7f      	cmp	r3, #127	@ 0x7f
 800095a:	d857      	bhi.n	8000a0c <ST7735_FillRectangle+0xd4>
 800095c:	88bb      	ldrh	r3, [r7, #4]
 800095e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000960:	d854      	bhi.n	8000a0c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000962:	88fa      	ldrh	r2, [r7, #6]
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	4413      	add	r3, r2
 8000968:	2b80      	cmp	r3, #128	@ 0x80
 800096a:	dd03      	ble.n	8000974 <ST7735_FillRectangle+0x3c>
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000972:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000974:	88ba      	ldrh	r2, [r7, #4]
 8000976:	883b      	ldrh	r3, [r7, #0]
 8000978:	4413      	add	r3, r2
 800097a:	2b80      	cmp	r3, #128	@ 0x80
 800097c:	dd03      	ble.n	8000986 <ST7735_FillRectangle+0x4e>
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000984:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000986:	f7ff fd1f 	bl	80003c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2d8      	uxtb	r0, r3
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	b2d9      	uxtb	r1, r3
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3b01      	subs	r3, #1
 80009a0:	b2dc      	uxtb	r4, r3
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	883b      	ldrh	r3, [r7, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4622      	mov	r2, r4
 80009b4:	f7ff fdb1 	bl	800051a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80009b8:	8c3b      	ldrh	r3, [r7, #32]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	733b      	strb	r3, [r7, #12]
 80009c2:	8c3b      	ldrh	r3, [r7, #32]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2120      	movs	r1, #32
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <ST7735_FillRectangle+0xdc>)
 80009ce:	f000 feed 	bl	80017ac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80009d2:	883b      	ldrh	r3, [r7, #0]
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	e013      	b.n	8000a00 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	e00a      	b.n	80009f4 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80009de:	f107 010c 	add.w	r1, r7, #12
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2202      	movs	r2, #2
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <ST7735_FillRectangle+0xe0>)
 80009ea:	f001 fdf8 	bl	80025de <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	80fb      	strh	r3, [r7, #6]
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f1      	bne.n	80009de <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	80bb      	strh	r3, [r7, #4]
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e8      	bne.n	80009d8 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000a06:	f7ff fceb 	bl	80003e0 <ST7735_Unselect>
 8000a0a:	e000      	b.n	8000a0e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a0c:	bf00      	nop
}
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	20000094 	.word	0x20000094

08000a1c <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4623      	mov	r3, r4
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	807b      	strh	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3e:	d869      	bhi.n	8000b14 <ST7735_FillRectangleFast+0xf8>
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a44:	d866      	bhi.n	8000b14 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000a46:	88fa      	ldrh	r2, [r7, #6]
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2b80      	cmp	r3, #128	@ 0x80
 8000a4e:	dd03      	ble.n	8000a58 <ST7735_FillRectangleFast+0x3c>
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000a56:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000a58:	88ba      	ldrh	r2, [r7, #4]
 8000a5a:	883b      	ldrh	r3, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2b80      	cmp	r3, #128	@ 0x80
 8000a60:	dd03      	ble.n	8000a6a <ST7735_FillRectangleFast+0x4e>
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000a68:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000a6a:	f7ff fcad 	bl	80003c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	b2d8      	uxtb	r0, r3
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	b2d9      	uxtb	r1, r3
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b2dc      	uxtb	r4, r3
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	3b01      	subs	r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4622      	mov	r2, r4
 8000a98:	f7ff fd3f 	bl	800051a <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000a9c:	8c3b      	ldrh	r3, [r7, #32]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	723b      	strb	r3, [r7, #8]
 8000aa6:	8c3b      	ldrh	r3, [r7, #32]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 ff7d 	bl	80029b0 <malloc>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000aba:	2300      	movs	r3, #0
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	e008      	b.n	8000ad2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	893a      	ldrh	r2, [r7, #8]
 8000aca:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d3f2      	bcc.n	8000ac0 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2120      	movs	r1, #32
 8000ade:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <ST7735_FillRectangleFast+0x100>)
 8000ae0:	f000 fe64 	bl	80017ac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	80bb      	strh	r3, [r7, #4]
 8000ae8:	e00b      	b.n	8000b02 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <ST7735_FillRectangleFast+0x104>)
 8000af8:	f001 fd71 	bl	80025de <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f0      	bne.n	8000aea <ST7735_FillRectangleFast+0xce>

    free(line);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f001 ff59 	bl	80029c0 <free>
    ST7735_Unselect();
 8000b0e:	f7ff fc67 	bl	80003e0 <ST7735_Unselect>
 8000b12:	e000      	b.n	8000b16 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b14:	bf00      	nop
}
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	20000094 	.word	0x20000094

08000b24 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	2100      	movs	r1, #0
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fefd 	bl	8000938 <ST7735_FillRectangle>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af02      	add	r7, sp, #8
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ff5e 	bl	8000a1c <ST7735_FillRectangleFast>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <ST7735_InvertColors>:
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    sendSPI(data, w*h*2);
    //ST7735_Unselect();
}

void ST7735_InvertColors(bool invert) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000b72:	f7ff fc29 	bl	80003c8 <ST7735_Select>
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <ST7735_InvertColors+0x18>
 8000b7c:	2321      	movs	r3, #33	@ 0x21
 8000b7e:	e000      	b.n	8000b82 <ST7735_InvertColors+0x1a>
 8000b80:	2320      	movs	r3, #32
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fc4c 	bl	8000420 <ST7735_WriteCommand>
    ST7735_Unselect();
 8000b88:	f7ff fc2a 	bl	80003e0 <ST7735_Unselect>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <ST7735_SetGamma>:

void ST7735_SetGamma(GammaDef gamma)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	ST7735_Select();
 8000b9e:	f7ff fc13 	bl	80003c8 <ST7735_Select>
	ST7735_WriteCommand(ST7735_GAMSET);
 8000ba2:	2026      	movs	r0, #38	@ 0x26
 8000ba4:	f7ff fc3c 	bl	8000420 <ST7735_WriteCommand>
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	2101      	movs	r1, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc51 	bl	8000454 <ST7735_WriteData>
	ST7735_Unselect();
 8000bb2:	f7ff fc15 	bl	80003e0 <ST7735_Unselect>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <ST7735_Test>:

void ST7735_Test() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af04      	add	r7, sp, #16
    // Test filling the screen with different colors
    ST7735_FillScreen(ST7735_BLACK);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ffac 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f000 fb61 	bl	8001294 <HAL_Delay>
    ST7735_FillScreen(ST7735_RED);
 8000bd2:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000bd6:	f7ff ffa5 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f000 fb5a 	bl	8001294 <HAL_Delay>
    ST7735_FillScreen(ST7735_GREEN);
 8000be0:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000be4:	f7ff ff9e 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f000 fb53 	bl	8001294 <HAL_Delay>
    ST7735_FillScreen(ST7735_BLUE);
 8000bee:	201f      	movs	r0, #31
 8000bf0:	f7ff ff98 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f000 fb4d 	bl	8001294 <HAL_Delay>
    ST7735_FillScreen(ST7735_WHITE);
 8000bfa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000bfe:	f7ff ff91 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(CUSTOM_DELAY);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f000 fb46 	bl	8001294 <HAL_Delay>
    ST7735_FillScreen(ST7735_BLACK);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ff8b 	bl	8000b24 <ST7735_FillScreen>
    HAL_Delay(END_DELAY);
 8000c0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c12:	f000 fb3f 	bl	8001294 <HAL_Delay>

    // Test writing a large amount of text to the screen
    ST7735_WriteString(0, 0, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere.", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c16:	4b5b      	ldr	r3, [pc, #364]	@ (8000d84 <ST7735_Test+0x1c4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	9202      	str	r2, [sp, #8]
 8000c1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c20:	9201      	str	r2, [sp, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a57      	ldr	r2, [pc, #348]	@ (8000d88 <ST7735_Test+0x1c8>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fde3 	bl	80007f8 <ST7735_WriteString>
    HAL_Delay(END_DELAY);
 8000c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c36:	f000 fb2d 	bl	8001294 <HAL_Delay>

    // Test drawing lines
    testlines(ST7735_YELLOW);
 8000c3a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000c3e:	f000 f8a7 	bl	8000d90 <testlines>
    HAL_Delay(END_DELAY);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f000 fb25 	bl	8001294 <HAL_Delay>

    // Test drawing rectangles
    testdrawrects(ST7735_MAGENTA);
 8000c4a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8000c4e:	f000 f969 	bl	8000f24 <testdrawrects>
    HAL_Delay(END_DELAY);
 8000c52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c56:	f000 fb1d 	bl	8001294 <HAL_Delay>

    // Test drawing pixels
    ST7735_DrawPixel(10, 10, ST7735_RED);
 8000c5a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000c5e:	210a      	movs	r1, #10
 8000c60:	200a      	movs	r0, #10
 8000c62:	f7ff fcb1 	bl	80005c8 <ST7735_DrawPixel>
    ST7735_DrawPixel(20, 20, ST7735_GREEN);
 8000c66:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c6a:	2114      	movs	r1, #20
 8000c6c:	2014      	movs	r0, #20
 8000c6e:	f7ff fcab 	bl	80005c8 <ST7735_DrawPixel>
    ST7735_DrawPixel(30, 30, ST7735_BLUE);
 8000c72:	221f      	movs	r2, #31
 8000c74:	211e      	movs	r1, #30
 8000c76:	201e      	movs	r0, #30
 8000c78:	f7ff fca6 	bl	80005c8 <ST7735_DrawPixel>
    HAL_Delay(END_DELAY);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c80:	f000 fb08 	bl	8001294 <HAL_Delay>

    // Test filling rectangles
    ST7735_FillRectangle(10, 10, 20, 20, ST7735_CYAN);
 8000c84:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	2214      	movs	r2, #20
 8000c8e:	210a      	movs	r1, #10
 8000c90:	200a      	movs	r0, #10
 8000c92:	f7ff fe51 	bl	8000938 <ST7735_FillRectangle>
    HAL_Delay(CUSTOM_DELAY);
 8000c96:	200a      	movs	r0, #10
 8000c98:	f000 fafc 	bl	8001294 <HAL_Delay>
    ST7735_FillRectangleFast(40, 40, 30, 30, ST7735_MAGENTA);
 8000c9c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	231e      	movs	r3, #30
 8000ca4:	221e      	movs	r2, #30
 8000ca6:	2128      	movs	r1, #40	@ 0x28
 8000ca8:	2028      	movs	r0, #40	@ 0x28
 8000caa:	f7ff feb7 	bl	8000a1c <ST7735_FillRectangleFast>
    HAL_Delay(CUSTOM_DELAY);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 faf0 	bl	8001294 <HAL_Delay>
    ST7735_FillRectangleFast(80, 80, 40, 40, ST7735_RED);
 8000cb4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2328      	movs	r3, #40	@ 0x28
 8000cbc:	2228      	movs	r2, #40	@ 0x28
 8000cbe:	2150      	movs	r1, #80	@ 0x50
 8000cc0:	2050      	movs	r0, #80	@ 0x50
 8000cc2:	f7ff feab 	bl	8000a1c <ST7735_FillRectangleFast>
    HAL_Delay(END_DELAY);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cca:	f000 fae3 	bl	8001294 <HAL_Delay>

    // Test writing strings
    ST7735_WriteString(10, 10, "Hello, World!", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <ST7735_Test+0x1c4>)
 8000cd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cd4:	9202      	str	r2, [sp, #8]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	9200      	str	r2, [sp, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d8c <ST7735_Test+0x1cc>)
 8000ce2:	210a      	movs	r1, #10
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f7ff fd87 	bl	80007f8 <ST7735_WriteString>
    HAL_Delay(END_DELAY);
 8000cea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cee:	f000 fad1 	bl	8001294 <HAL_Delay>
    // const uint16_t image_data[] = { ... }; // Example image data
    // ST7735_DrawImage(0, 0, 128, 128, image_data);
    // HAL_Delay(1000);

    // Test inverting colors
    ST7735_InvertColors(true);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff ff38 	bl	8000b68 <ST7735_InvertColors>
    HAL_Delay(END_DELAY);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfc:	f000 faca 	bl	8001294 <HAL_Delay>
    ST7735_InvertColors(false);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff31 	bl	8000b68 <ST7735_InvertColors>
    HAL_Delay(END_DELAY);
 8000d06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d0a:	f000 fac3 	bl	8001294 <HAL_Delay>

    // Test setting gamma
    ST7735_SetGamma(GAMMA_10);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff ff40 	bl	8000b94 <ST7735_SetGamma>
    HAL_Delay(200);
 8000d14:	20c8      	movs	r0, #200	@ 0xc8
 8000d16:	f000 fabd 	bl	8001294 <HAL_Delay>
    ST7735_SetGamma(GAMMA_22);
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f7ff ff3a 	bl	8000b94 <ST7735_SetGamma>
    HAL_Delay(200);
 8000d20:	20c8      	movs	r0, #200	@ 0xc8
 8000d22:	f000 fab7 	bl	8001294 <HAL_Delay>
    ST7735_FillScreenFast(ST7735_BLACK);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ff0d 	bl	8000b46 <ST7735_FillScreenFast>

    ST7735_FillScreenFast(ST7735_BLACK);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff0a 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f000 faae 	bl	8001294 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_RED);
 8000d38:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d3c:	f7ff ff03 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f000 faa7 	bl	8001294 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_GREEN);
 8000d46:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000d4a:	f7ff fefc 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f000 faa0 	bl	8001294 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_BLUE);
 8000d54:	201f      	movs	r0, #31
 8000d56:	f7ff fef6 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f000 fa9a 	bl	8001294 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_WHITE);
 8000d60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d64:	f7ff feef 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(CUSTOM_DELAY);
 8000d68:	200a      	movs	r0, #10
 8000d6a:	f000 fa93 	bl	8001294 <HAL_Delay>
	ST7735_FillScreenFast(ST7735_BLACK);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fee9 	bl	8000b46 <ST7735_FillScreenFast>
	HAL_Delay(END_DELAY);
 8000d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d78:	f000 fa8c 	bl	8001294 <HAL_Delay>
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000000 	.word	0x20000000
 8000d88:	08002c5c 	.word	0x08002c5c
 8000d8c:	08002dcc 	.word	0x08002dcc

08000d90 <testlines>:

void testlines(uint16_t color) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
    ST7735_FillScreenFast(ST7735_BLACK);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fed3 	bl	8000b46 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	82fb      	strh	r3, [r7, #22]
 8000da4:	e00e      	b.n	8000dc4 <testlines+0x34>
        ST7735_DrawLine(0, 0, x, ST7735_HEIGHT - 1, color);
 8000da6:	8afa      	ldrh	r2, [r7, #22]
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	237f      	movs	r3, #127	@ 0x7f
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fc3d 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000db6:	200a      	movs	r0, #10
 8000db8:	f000 fa6c 	bl	8001294 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	82fb      	strh	r3, [r7, #22]
 8000dc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dca:	ddec      	ble.n	8000da6 <testlines+0x16>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	82bb      	strh	r3, [r7, #20]
 8000dd0:	e00f      	b.n	8000df2 <testlines+0x62>
        ST7735_DrawLine(0, 0, ST7735_WIDTH - 1, y, color);
 8000dd2:	8aba      	ldrh	r2, [r7, #20]
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	227f      	movs	r2, #127	@ 0x7f
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fc26 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000de4:	200a      	movs	r0, #10
 8000de6:	f000 fa55 	bl	8001294 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000dea:	8abb      	ldrh	r3, [r7, #20]
 8000dec:	3306      	adds	r3, #6
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	82bb      	strh	r3, [r7, #20]
 8000df2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df8:	ddeb      	ble.n	8000dd2 <testlines+0x42>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fea3 	bl	8000b46 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	827b      	strh	r3, [r7, #18]
 8000e04:	e00e      	b.n	8000e24 <testlines+0x94>
        ST7735_DrawLine(ST7735_WIDTH - 1, 0, x, ST7735_HEIGHT - 1, color);
 8000e06:	8a7a      	ldrh	r2, [r7, #18]
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	237f      	movs	r3, #127	@ 0x7f
 8000e0e:	2100      	movs	r1, #0
 8000e10:	207f      	movs	r0, #127	@ 0x7f
 8000e12:	f7ff fc0d 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f000 fa3c 	bl	8001294 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000e1c:	8a7b      	ldrh	r3, [r7, #18]
 8000e1e:	3306      	adds	r3, #6
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	827b      	strh	r3, [r7, #18]
 8000e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e2a:	ddec      	ble.n	8000e06 <testlines+0x76>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	823b      	strh	r3, [r7, #16]
 8000e30:	e00f      	b.n	8000e52 <testlines+0xc2>
        ST7735_DrawLine(ST7735_WIDTH - 1, 0, 0, y, color);
 8000e32:	8a3a      	ldrh	r2, [r7, #16]
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	207f      	movs	r0, #127	@ 0x7f
 8000e40:	f7ff fbf6 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000e44:	200a      	movs	r0, #10
 8000e46:	f000 fa25 	bl	8001294 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000e4a:	8a3b      	ldrh	r3, [r7, #16]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	823b      	strh	r3, [r7, #16]
 8000e52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e58:	ddeb      	ble.n	8000e32 <testlines+0xa2>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fe73 	bl	8000b46 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	e00e      	b.n	8000e84 <testlines+0xf4>
        ST7735_DrawLine(0, ST7735_HEIGHT - 1, x, 0, color);
 8000e66:	89fa      	ldrh	r2, [r7, #14]
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	217f      	movs	r1, #127	@ 0x7f
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fbdd 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 fa0c 	bl	8001294 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	3306      	adds	r3, #6
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	81fb      	strh	r3, [r7, #14]
 8000e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e8a:	ddec      	ble.n	8000e66 <testlines+0xd6>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	81bb      	strh	r3, [r7, #12]
 8000e90:	e00f      	b.n	8000eb2 <testlines+0x122>
        ST7735_DrawLine(0, ST7735_HEIGHT - 1, ST7735_WIDTH - 1, y, color);
 8000e92:	89ba      	ldrh	r2, [r7, #12]
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	227f      	movs	r2, #127	@ 0x7f
 8000e9c:	217f      	movs	r1, #127	@ 0x7f
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fbc6 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f000 f9f5 	bl	8001294 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000eaa:	89bb      	ldrh	r3, [r7, #12]
 8000eac:	3306      	adds	r3, #6
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	81bb      	strh	r3, [r7, #12]
 8000eb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eb8:	ddeb      	ble.n	8000e92 <testlines+0x102>
    }

    ST7735_FillScreenFast(ST7735_BLACK);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe43 	bl	8000b46 <ST7735_FillScreenFast>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	e00e      	b.n	8000ee4 <testlines+0x154>
        ST7735_DrawLine(ST7735_WIDTH - 1, ST7735_HEIGHT - 1, x, 0, color);
 8000ec6:	897a      	ldrh	r2, [r7, #10]
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	217f      	movs	r1, #127	@ 0x7f
 8000ed0:	207f      	movs	r0, #127	@ 0x7f
 8000ed2:	f7ff fbad 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f000 f9dc 	bl	8001294 <HAL_Delay>
    for (int16_t x = 0; x < ST7735_WIDTH; x += 6) {
 8000edc:	897b      	ldrh	r3, [r7, #10]
 8000ede:	3306      	adds	r3, #6
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	817b      	strh	r3, [r7, #10]
 8000ee4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eea:	ddec      	ble.n	8000ec6 <testlines+0x136>
    }
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	813b      	strh	r3, [r7, #8]
 8000ef0:	e00f      	b.n	8000f12 <testlines+0x182>
        ST7735_DrawLine(ST7735_WIDTH - 1, ST7735_HEIGHT - 1, 0, y, color);
 8000ef2:	893a      	ldrh	r2, [r7, #8]
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	217f      	movs	r1, #127	@ 0x7f
 8000efe:	207f      	movs	r0, #127	@ 0x7f
 8000f00:	f7ff fb96 	bl	8000630 <ST7735_DrawLine>
        HAL_Delay(CUSTOM_DELAY);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f000 f9c5 	bl	8001294 <HAL_Delay>
    for (int16_t y = 0; y < ST7735_HEIGHT; y += 6) {
 8000f0a:	893b      	ldrh	r3, [r7, #8]
 8000f0c:	3306      	adds	r3, #6
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	813b      	strh	r3, [r7, #8]
 8000f12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f18:	ddeb      	ble.n	8000ef2 <testlines+0x162>
    }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <testdrawrects>:

void testdrawrects(uint16_t color) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreenFast(ST7735_BLACK);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fe09 	bl	8000b46 <ST7735_FillScreenFast>
	for (int16_t x=0; x < ST7735_WIDTH; x+=6) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	81fb      	strh	r3, [r7, #14]
 8000f38:	e01e      	b.n	8000f78 <testdrawrects+0x54>
		ST7735_DrawRectangle(ST7735_WIDTH/2 -x/2, ST7735_HEIGHT/2 -x/2 , x, x, color);
 8000f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f3e:	0fda      	lsrs	r2, r3, #31
 8000f40:	4413      	add	r3, r2
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f4c:	b298      	uxth	r0, r3
 8000f4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f52:	0fda      	lsrs	r2, r3, #31
 8000f54:	4413      	add	r3, r2
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f60:	b299      	uxth	r1, r3
 8000f62:	89fa      	ldrh	r2, [r7, #14]
 8000f64:	89fc      	ldrh	r4, [r7, #14]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	f7ff fc8e 	bl	800088c <ST7735_DrawRectangle>
	for (int16_t x=0; x < ST7735_WIDTH; x+=6) {
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	3306      	adds	r3, #6
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	81fb      	strh	r3, [r7, #14]
 8000f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f7e:	dddc      	ble.n	8000f3a <testdrawrects+0x16>
	}
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_MspInit+0x60>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_MspInit+0x60>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000

08000ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <HAL_RTC_MspInit+0x3c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d110      	bne.n	8001024 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001002:	f000 fbeb 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_RTC_MspInit+0x40>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <HAL_RTC_MspInit+0x40>)
 800100c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_RTC_MspInit+0x40>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800101e:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_RTC_MspInit+0x44>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40002800 	.word	0x40002800
 8001030:	40021000 	.word	0x40021000
 8001034:	4242043c 	.word	0x4242043c

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <HAL_SPI_MspInit+0x70>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d123      	bne.n	80010a0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 800105e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_SPI_MspInit+0x74>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001088:	23b0      	movs	r3, #176	@ 0xb0
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_SPI_MspInit+0x78>)
 800109c:	f000 fa02 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40013000 	.word	0x40013000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f8aa 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f001 fd0e 	bl	8002b5c <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20005000 	.word	0x20005000
 800116c:	00000400 	.word	0x00000400
 8001170:	200000ec 	.word	0x200000ec
 8001174:	20000240 	.word	0x20000240

08001178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff fff8 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800118a:	490c      	ldr	r1, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800118c:	4a0c      	ldr	r2, [pc, #48]	@ (80011c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a0:	4c09      	ldr	r4, [pc, #36]	@ (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 fcdb 	bl	8002b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7fe ffcb 	bl	800014c <main>
  bx lr
 80011b6:	4770      	bx	lr
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011c0:	08003608 	.word	0x08003608
  ldr r2, =_sbss
 80011c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011c8:	2000023c 	.word	0x2000023c

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_Init+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_Init+0x28>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f92b 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fece 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f935 	bl	800148a <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f90b 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000008 	.word	0x20000008
 8001254:	20000010 	.word	0x20000010
 8001258:	2000000c 	.word	0x2000000c

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	@ (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000010 	.word	0x20000010
 800127c:	200000f0 	.word	0x200000f0

08001280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	@ (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200000f0 	.word	0x200000f0

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000010 	.word	0x20000010

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff49 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	@ 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e169      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8158 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a9a      	ldr	r2, [pc, #616]	@ (8001744 <HAL_GPIO_Init+0x2a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a98      	ldr	r2, [pc, #608]	@ (8001744 <HAL_GPIO_Init+0x2a0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a98      	ldr	r2, [pc, #608]	@ (8001748 <HAL_GPIO_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a96      	ldr	r2, [pc, #600]	@ (8001748 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a96      	ldr	r2, [pc, #600]	@ (800174c <HAL_GPIO_Init+0x2a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a94      	ldr	r2, [pc, #592]	@ (800174c <HAL_GPIO_Init+0x2a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a94      	ldr	r2, [pc, #592]	@ (8001750 <HAL_GPIO_Init+0x2ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a92      	ldr	r2, [pc, #584]	@ (8001750 <HAL_GPIO_Init+0x2ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a92      	ldr	r2, [pc, #584]	@ (8001754 <HAL_GPIO_Init+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a90      	ldr	r2, [pc, #576]	@ (8001754 <HAL_GPIO_Init+0x2b0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a79      	ldr	r2, [pc, #484]	@ (8001758 <HAL_GPIO_Init+0x2b4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	@ 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	@ 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b1 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a48      	ldr	r2, [pc, #288]	@ (8001760 <HAL_GPIO_Init+0x2bc>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <HAL_GPIO_Init+0x2c0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3f      	ldr	r2, [pc, #252]	@ (8001768 <HAL_GPIO_Init+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1e8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3e      	ldr	r2, [pc, #248]	@ (800176c <HAL_GPIO_Init+0x2c8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	@ (8001770 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001684:	2304      	movs	r3, #4
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001690:	2300      	movs	r3, #0
 8001692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a2:	492f      	ldr	r1, [pc, #188]	@ (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	492c      	ldr	r1, [pc, #176]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4928      	ldr	r1, [pc, #160]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4922      	ldr	r1, [pc, #136]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	491e      	ldr	r1, [pc, #120]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4918      	ldr	r1, [pc, #96]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4914      	ldr	r1, [pc, #80]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	490e      	ldr	r1, [pc, #56]	@ (8001774 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e021      	b.n	8001786 <HAL_GPIO_Init+0x2e2>
 8001742:	bf00      	nop
 8001744:	10320000 	.word	0x10320000
 8001748:	10310000 	.word	0x10310000
 800174c:	10220000 	.word	0x10220000
 8001750:	10210000 	.word	0x10210000
 8001754:	10120000 	.word	0x10120000
 8001758:	10110000 	.word	0x10110000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4909      	ldr	r1, [pc, #36]	@ (80017a8 <HAL_GPIO_Init+0x304>)
 8001782:	4013      	ands	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae8e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	372c      	adds	r7, #44	@ 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	420e0020 	.word	0x420e0020

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e272      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b92      	ldr	r3, [pc, #584]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4b8f      	ldr	r3, [pc, #572]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
 800182c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b89      	ldr	r3, [pc, #548]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x12c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e24c      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x76>
 800185c:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b7b      	ldr	r3, [pc, #492]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b78      	ldr	r3, [pc, #480]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xbc>
 8001896:	4b72      	ldr	r3, [pc, #456]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a71      	ldr	r2, [pc, #452]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 80018b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a67      	ldr	r2, [pc, #412]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fcd6 	bl	8001280 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fcd2 	bl	8001280 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e200      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fcc2 	bl	8001280 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fcbe 	bl	8001280 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1ec      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x10c>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
 8001946:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b43      	ldr	r3, [pc, #268]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c0      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4939      	ldr	r1, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b36      	ldr	r3, [pc, #216]	@ (8001a64 <HAL_RCC_OscConfig+0x270>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fc77 	bl	8001280 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fc73 	bl	8001280 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1a1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4927      	ldr	r1, [pc, #156]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <HAL_RCC_OscConfig+0x270>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc56 	bl	8001280 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc52 	bl	8001280 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e180      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fc36 	bl	8001280 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fc32 	bl	8001280 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e160      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 faba 	bl	8001fb0 <RCC_Delay>
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc1c 	bl	8001280 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc18 	bl	8001280 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e146      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	42420000 	.word	0x42420000
 8001a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e9      	bne.n	8001a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a6 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a87      	ldr	r2, [pc, #540]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b7f      	ldr	r3, [pc, #508]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fbd9 	bl	8001280 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff fbd5 	bl	8001280 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	@ 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e103      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02d      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	e01c      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x356>
 8001b30:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a60      	ldr	r2, [pc, #384]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b58      	ldr	r3, [pc, #352]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb89 	bl	8001280 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fb85 	bl	8001280 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0b1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCC_OscConfig+0x37e>
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb73 	bl	8001280 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fb6f 	bl	8001280 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e09b      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d061      	beq.n	8001cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d146      	bne.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fb43 	bl	8001280 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff fb3f 	bl	8001280 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e06d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4921      	ldr	r1, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	491b      	ldr	r1, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb13 	bl	8001280 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb0f 	bl	8001280 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46a>
 8001c7c:	e035      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fafc 	bl	8001280 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff faf8 	bl	8001280 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e019      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_OscConfig+0x500>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa4a 	bl	8001280 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff fa46 	bl	8001280 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9a8 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080035c0 	.word	0x080035c0
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	2000000c 	.word	0x2000000c

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e027      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	613b      	str	r3, [r7, #16]
      break;
 8001f00:	e027      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c5b      	lsrs	r3, r3, #17
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e004      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	613b      	str	r3, [r7, #16]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	693b      	ldr	r3, [r7, #16]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	080035d8 	.word	0x080035d8
 8001f6c:	080035e8 	.word	0x080035e8
 8001f70:	003d0900 	.word	0x003d0900

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b02      	ldr	r3, [pc, #8]	@ (8001f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000008 	.word	0x20000008

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	f7ff fff2 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0adb      	lsrs	r3, r3, #11
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	080035d0 	.word	0x080035d0

08001fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <RCC_Delay+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <RCC_Delay+0x38>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fcc:	bf00      	nop
  }
  while (Delay --);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <RCC_Delay+0x1c>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d07d      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200c:	4b4f      	ldr	r3, [pc, #316]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b4c      	ldr	r3, [pc, #304]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002022:	61d3      	str	r3, [r2, #28]
 8002024:	4b49      	ldr	r3, [pc, #292]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002030:	2301      	movs	r3, #1
 8002032:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d118      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204c:	f7ff f918 	bl	8001280 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	e008      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7ff f914 	bl	8001280 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e06d      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800207a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02e      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d027      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002098:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800209a:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020a6:	4a29      	ldr	r2, [pc, #164]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d014      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7ff f8e3 	bl	8001280 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff f8df 	bl	8001280 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e036      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ee      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4917      	ldr	r1, [pc, #92]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002102:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	490b      	ldr	r1, [pc, #44]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4904      	ldr	r1, [pc, #16]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	42420440 	.word	0x42420440

08002158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b10      	cmp	r3, #16
 800217e:	f200 808a 	bhi.w	8002296 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d045      	beq.n	8002214 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d075      	beq.n	800227a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800218e:	e082      	b.n	8002296 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002190:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002196:	4b45      	ldr	r3, [pc, #276]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d07b      	beq.n	800229a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a41      	ldr	r2, [pc, #260]	@ (80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ba:	4b3c      	ldr	r3, [pc, #240]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0c5b      	lsrs	r3, r3, #17
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	4a3b      	ldr	r2, [pc, #236]	@ (80022b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00d      	beq.n	80021f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80021d4:	4a38      	ldr	r2, [pc, #224]	@ (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	e004      	b.n	80021f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80021f0:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021fc:	d102      	bne.n	8002204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	61bb      	str	r3, [r7, #24]
      break;
 8002202:	e04a      	b.n	800229a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
      break;
 8002212:	e042      	b.n	800229a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002214:	4b25      	ldr	r3, [pc, #148]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002224:	d108      	bne.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e01f      	b.n	8002278 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800223e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002242:	d109      	bne.n	8002258 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002250:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e00f      	b.n	8002278 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800225e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002262:	d11c      	bne.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d016      	beq.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002270:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002274:	61bb      	str	r3, [r7, #24]
      break;
 8002276:	e012      	b.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002278:	e011      	b.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800227a:	f7ff fe85 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0b9b      	lsrs	r3, r3, #14
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	61bb      	str	r3, [r7, #24]
      break;
 8002294:	e004      	b.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002296:	bf00      	nop
 8002298:	e002      	b.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800229e:	bf00      	nop
    }
  }
  return (frequency);
 80022a0:	69bb      	ldr	r3, [r7, #24]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	080035ec 	.word	0x080035ec
 80022b4:	080035fc 	.word	0x080035fc
 80022b8:	007a1200 	.word	0x007a1200
 80022bc:	003d0900 	.word	0x003d0900
 80022c0:	aaaaaaab 	.word	0xaaaaaaab

080022c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07a      	b.n	80023d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7c5b      	ldrb	r3, [r3, #17]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fe80 	bl	8000ff0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f870 	bl	80023dc <HAL_RTC_WaitForSynchro>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e061      	b.n	80023d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f892 	bl	8002436 <RTC_EnterInitMode>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2204      	movs	r2, #4
 800231c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e056      	b.n	80023d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0207 	bic.w	r2, r2, #7
 8002330:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800233a:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <HAL_RTC_Init+0x114>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a26      	ldr	r2, [pc, #152]	@ (80023d8 <HAL_RTC_Init+0x114>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_RTC_Init+0x114>)
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4921      	ldr	r1, [pc, #132]	@ (80023d8 <HAL_RTC_Init+0x114>)
 8002354:	4313      	orrs	r3, r2
 8002356:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d003      	beq.n	800236a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e00e      	b.n	8002388 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff fef4 	bl	8002158 <HAL_RCCEx_GetPeriphCLKFreq>
 8002370:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2204      	movs	r2, #4
 800237c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e026      	b.n	80023d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	0c1a      	lsrs	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 020f 	and.w	r2, r2, #15
 8002394:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	b292      	uxth	r2, r2
 800239e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f870 	bl	8002486 <RTC_ExitInitMode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2204      	movs	r2, #4
 80023b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00c      	b.n	80023d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40006c00 	.word	0x40006c00

080023dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01d      	b.n	800242e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0208 	bic.w	r2, r2, #8
 8002400:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002402:	f7fe ff3d 	bl	8001280 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002408:	e009      	b.n	800241e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800240a:	f7fe ff39 	bl	8001280 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002418:	d901      	bls.n	800241e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e007      	b.n	800242e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002442:	f7fe ff1d 	bl	8001280 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002448:	e009      	b.n	800245e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800244a:	f7fe ff19 	bl	8001280 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002458:	d901      	bls.n	800245e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e00f      	b.n	800247e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0210 	orr.w	r2, r2, #16
 800247a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0210 	bic.w	r2, r2, #16
 80024a0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80024a2:	f7fe feed 	bl	8001280 <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024a8:	e009      	b.n	80024be <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80024aa:	f7fe fee9 	bl	8001280 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b8:	d901      	bls.n	80024be <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e007      	b.n	80024ce <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e076      	b.n	80025d6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f8:	d009      	beq.n	800250e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	e005      	b.n	800250e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe fd85 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002544:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	ea42 0103 	orr.w	r1, r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	0c1a      	lsrs	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 0204 	and.w	r2, r2, #4
 80025b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b088      	sub	sp, #32
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_SPI_Transmit+0x22>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e12d      	b.n	800285c <HAL_SPI_Transmit+0x27e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002608:	f7fe fe3a 	bl	8001280 <HAL_GetTick>
 800260c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800261e:	2302      	movs	r3, #2
 8002620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002622:	e116      	b.n	8002852 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Transmit+0x52>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002634:	e10d      	b.n	8002852 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800267c:	d10f      	bne.n	800269e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800268c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800269c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b40      	cmp	r3, #64	@ 0x40
 80026aa:	d007      	beq.n	80026bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026c4:	d14f      	bne.n	8002766 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_SPI_Transmit+0xf6>
 80026ce:	8afb      	ldrh	r3, [r7, #22]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d142      	bne.n	800275a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026f8:	e02f      	b.n	800275a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d112      	bne.n	800272e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	1c9a      	adds	r2, r3, #2
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800272c:	e015      	b.n	800275a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272e:	f7fe fda7 	bl	8001280 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d803      	bhi.n	8002746 <HAL_SPI_Transmit+0x168>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d102      	bne.n	800274c <HAL_SPI_Transmit+0x16e>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002758:	e07b      	b.n	8002852 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ca      	bne.n	80026fa <HAL_SPI_Transmit+0x11c>
 8002764:	e050      	b.n	8002808 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0x196>
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d144      	bne.n	80027fe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800279a:	e030      	b.n	80027fe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d113      	bne.n	80027d2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027d0:	e015      	b.n	80027fe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027d2:	f7fe fd55 	bl	8001280 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d803      	bhi.n	80027ea <HAL_SPI_Transmit+0x20c>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d102      	bne.n	80027f0 <HAL_SPI_Transmit+0x212>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80027fc:	e029      	b.n	8002852 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1c9      	bne.n	800279c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f8b1 	bl	8002974 <SPI_EndRxTxTransaction>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e003      	b.n	8002852 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800285a:	7ffb      	ldrb	r3, [r7, #31]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002874:	f7fe fd04 	bl	8001280 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002884:	f7fe fcfc 	bl	8001280 <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	e054      	b.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d050      	beq.n	8002946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a4:	f7fe fcec 	bl	8001280 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d902      	bls.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d2:	d111      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028dc:	d004      	beq.n	80028e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	d107      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	d10f      	bne.n	8002922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e017      	b.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3b01      	subs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d19b      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000008 	.word	0x20000008

08002974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff6a 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e000      	b.n	80029a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <malloc>:
 80029b0:	4b02      	ldr	r3, [pc, #8]	@ (80029bc <malloc+0xc>)
 80029b2:	4601      	mov	r1, r0
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	f000 b82d 	b.w	8002a14 <_malloc_r>
 80029ba:	bf00      	nop
 80029bc:	20000014 	.word	0x20000014

080029c0 <free>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <free+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f000 b8f5 	b.w	8002bb4 <_free_r>
 80029ca:	bf00      	nop
 80029cc:	20000014 	.word	0x20000014

080029d0 <sbrk_aligned>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002a10 <sbrk_aligned+0x40>)
 80029d4:	460c      	mov	r4, r1
 80029d6:	6831      	ldr	r1, [r6, #0]
 80029d8:	4605      	mov	r5, r0
 80029da:	b911      	cbnz	r1, 80029e2 <sbrk_aligned+0x12>
 80029dc:	f000 f8ae 	bl	8002b3c <_sbrk_r>
 80029e0:	6030      	str	r0, [r6, #0]
 80029e2:	4621      	mov	r1, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 f8a9 	bl	8002b3c <_sbrk_r>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	d103      	bne.n	80029f6 <sbrk_aligned+0x26>
 80029ee:	f04f 34ff 	mov.w	r4, #4294967295
 80029f2:	4620      	mov	r0, r4
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	1cc4      	adds	r4, r0, #3
 80029f8:	f024 0403 	bic.w	r4, r4, #3
 80029fc:	42a0      	cmp	r0, r4
 80029fe:	d0f8      	beq.n	80029f2 <sbrk_aligned+0x22>
 8002a00:	1a21      	subs	r1, r4, r0
 8002a02:	4628      	mov	r0, r5
 8002a04:	f000 f89a 	bl	8002b3c <_sbrk_r>
 8002a08:	3001      	adds	r0, #1
 8002a0a:	d1f2      	bne.n	80029f2 <sbrk_aligned+0x22>
 8002a0c:	e7ef      	b.n	80029ee <sbrk_aligned+0x1e>
 8002a0e:	bf00      	nop
 8002a10:	200000f4 	.word	0x200000f4

08002a14 <_malloc_r>:
 8002a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a18:	1ccd      	adds	r5, r1, #3
 8002a1a:	f025 0503 	bic.w	r5, r5, #3
 8002a1e:	3508      	adds	r5, #8
 8002a20:	2d0c      	cmp	r5, #12
 8002a22:	bf38      	it	cc
 8002a24:	250c      	movcc	r5, #12
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	4606      	mov	r6, r0
 8002a2a:	db01      	blt.n	8002a30 <_malloc_r+0x1c>
 8002a2c:	42a9      	cmp	r1, r5
 8002a2e:	d904      	bls.n	8002a3a <_malloc_r+0x26>
 8002a30:	230c      	movs	r3, #12
 8002a32:	6033      	str	r3, [r6, #0]
 8002a34:	2000      	movs	r0, #0
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b10 <_malloc_r+0xfc>
 8002a3e:	f000 f869 	bl	8002b14 <__malloc_lock>
 8002a42:	f8d8 3000 	ldr.w	r3, [r8]
 8002a46:	461c      	mov	r4, r3
 8002a48:	bb44      	cbnz	r4, 8002a9c <_malloc_r+0x88>
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f7ff ffbf 	bl	80029d0 <sbrk_aligned>
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	4604      	mov	r4, r0
 8002a56:	d158      	bne.n	8002b0a <_malloc_r+0xf6>
 8002a58:	f8d8 4000 	ldr.w	r4, [r8]
 8002a5c:	4627      	mov	r7, r4
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	d143      	bne.n	8002aea <_malloc_r+0xd6>
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	d04b      	beq.n	8002afe <_malloc_r+0xea>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	4639      	mov	r1, r7
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	eb04 0903 	add.w	r9, r4, r3
 8002a70:	f000 f864 	bl	8002b3c <_sbrk_r>
 8002a74:	4581      	cmp	r9, r0
 8002a76:	d142      	bne.n	8002afe <_malloc_r+0xea>
 8002a78:	6821      	ldr	r1, [r4, #0]
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	1a6d      	subs	r5, r5, r1
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7ff ffa6 	bl	80029d0 <sbrk_aligned>
 8002a84:	3001      	adds	r0, #1
 8002a86:	d03a      	beq.n	8002afe <_malloc_r+0xea>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	442b      	add	r3, r5
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	bb62      	cbnz	r2, 8002af0 <_malloc_r+0xdc>
 8002a96:	f8c8 7000 	str.w	r7, [r8]
 8002a9a:	e00f      	b.n	8002abc <_malloc_r+0xa8>
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	1b52      	subs	r2, r2, r5
 8002aa0:	d420      	bmi.n	8002ae4 <_malloc_r+0xd0>
 8002aa2:	2a0b      	cmp	r2, #11
 8002aa4:	d917      	bls.n	8002ad6 <_malloc_r+0xc2>
 8002aa6:	1961      	adds	r1, r4, r5
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	6025      	str	r5, [r4, #0]
 8002aac:	bf18      	it	ne
 8002aae:	6059      	strne	r1, [r3, #4]
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	bf08      	it	eq
 8002ab4:	f8c8 1000 	streq.w	r1, [r8]
 8002ab8:	5162      	str	r2, [r4, r5]
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	4630      	mov	r0, r6
 8002abe:	f000 f82f 	bl	8002b20 <__malloc_unlock>
 8002ac2:	f104 000b 	add.w	r0, r4, #11
 8002ac6:	1d23      	adds	r3, r4, #4
 8002ac8:	f020 0007 	bic.w	r0, r0, #7
 8002acc:	1ac2      	subs	r2, r0, r3
 8002ace:	bf1c      	itt	ne
 8002ad0:	1a1b      	subne	r3, r3, r0
 8002ad2:	50a3      	strne	r3, [r4, r2]
 8002ad4:	e7af      	b.n	8002a36 <_malloc_r+0x22>
 8002ad6:	6862      	ldr	r2, [r4, #4]
 8002ad8:	42a3      	cmp	r3, r4
 8002ada:	bf0c      	ite	eq
 8002adc:	f8c8 2000 	streq.w	r2, [r8]
 8002ae0:	605a      	strne	r2, [r3, #4]
 8002ae2:	e7eb      	b.n	8002abc <_malloc_r+0xa8>
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	6864      	ldr	r4, [r4, #4]
 8002ae8:	e7ae      	b.n	8002a48 <_malloc_r+0x34>
 8002aea:	463c      	mov	r4, r7
 8002aec:	687f      	ldr	r7, [r7, #4]
 8002aee:	e7b6      	b.n	8002a5e <_malloc_r+0x4a>
 8002af0:	461a      	mov	r2, r3
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	d1fb      	bne.n	8002af0 <_malloc_r+0xdc>
 8002af8:	2300      	movs	r3, #0
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	e7de      	b.n	8002abc <_malloc_r+0xa8>
 8002afe:	230c      	movs	r3, #12
 8002b00:	4630      	mov	r0, r6
 8002b02:	6033      	str	r3, [r6, #0]
 8002b04:	f000 f80c 	bl	8002b20 <__malloc_unlock>
 8002b08:	e794      	b.n	8002a34 <_malloc_r+0x20>
 8002b0a:	6005      	str	r5, [r0, #0]
 8002b0c:	e7d6      	b.n	8002abc <_malloc_r+0xa8>
 8002b0e:	bf00      	nop
 8002b10:	200000f8 	.word	0x200000f8

08002b14 <__malloc_lock>:
 8002b14:	4801      	ldr	r0, [pc, #4]	@ (8002b1c <__malloc_lock+0x8>)
 8002b16:	f000 b84b 	b.w	8002bb0 <__retarget_lock_acquire_recursive>
 8002b1a:	bf00      	nop
 8002b1c:	20000238 	.word	0x20000238

08002b20 <__malloc_unlock>:
 8002b20:	4801      	ldr	r0, [pc, #4]	@ (8002b28 <__malloc_unlock+0x8>)
 8002b22:	f000 b846 	b.w	8002bb2 <__retarget_lock_release_recursive>
 8002b26:	bf00      	nop
 8002b28:	20000238 	.word	0x20000238

08002b2c <memset>:
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4402      	add	r2, r0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d100      	bne.n	8002b36 <memset+0xa>
 8002b34:	4770      	bx	lr
 8002b36:	f803 1b01 	strb.w	r1, [r3], #1
 8002b3a:	e7f9      	b.n	8002b30 <memset+0x4>

08002b3c <_sbrk_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	2300      	movs	r3, #0
 8002b40:	4d05      	ldr	r5, [pc, #20]	@ (8002b58 <_sbrk_r+0x1c>)
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7fe fae0 	bl	800110c <_sbrk>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_sbrk_r+0x1a>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_sbrk_r+0x1a>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	20000234 	.word	0x20000234

08002b5c <__errno>:
 8002b5c:	4b01      	ldr	r3, [pc, #4]	@ (8002b64 <__errno+0x8>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000014 	.word	0x20000014

08002b68 <__libc_init_array>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	4d0c      	ldr	r5, [pc, #48]	@ (8002ba0 <__libc_init_array+0x38>)
 8002b6e:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba4 <__libc_init_array+0x3c>)
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	42a6      	cmp	r6, r4
 8002b76:	d109      	bne.n	8002b8c <__libc_init_array+0x24>
 8002b78:	f000 f864 	bl	8002c44 <_init>
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba8 <__libc_init_array+0x40>)
 8002b80:	4c0a      	ldr	r4, [pc, #40]	@ (8002bac <__libc_init_array+0x44>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	42a6      	cmp	r6, r4
 8002b88:	d105      	bne.n	8002b96 <__libc_init_array+0x2e>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b90:	4798      	blx	r3
 8002b92:	3601      	adds	r6, #1
 8002b94:	e7ee      	b.n	8002b74 <__libc_init_array+0xc>
 8002b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9a:	4798      	blx	r3
 8002b9c:	3601      	adds	r6, #1
 8002b9e:	e7f2      	b.n	8002b86 <__libc_init_array+0x1e>
 8002ba0:	08003600 	.word	0x08003600
 8002ba4:	08003600 	.word	0x08003600
 8002ba8:	08003600 	.word	0x08003600
 8002bac:	08003604 	.word	0x08003604

08002bb0 <__retarget_lock_acquire_recursive>:
 8002bb0:	4770      	bx	lr

08002bb2 <__retarget_lock_release_recursive>:
 8002bb2:	4770      	bx	lr

08002bb4 <_free_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	d040      	beq.n	8002c3e <_free_r+0x8a>
 8002bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc0:	1f0c      	subs	r4, r1, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bfb8      	it	lt
 8002bc6:	18e4      	addlt	r4, r4, r3
 8002bc8:	f7ff ffa4 	bl	8002b14 <__malloc_lock>
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <_free_r+0x8c>)
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	b933      	cbnz	r3, 8002be0 <_free_r+0x2c>
 8002bd2:	6063      	str	r3, [r4, #4]
 8002bd4:	6014      	str	r4, [r2, #0]
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bdc:	f7ff bfa0 	b.w	8002b20 <__malloc_unlock>
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	d908      	bls.n	8002bf6 <_free_r+0x42>
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	1821      	adds	r1, r4, r0
 8002be8:	428b      	cmp	r3, r1
 8002bea:	bf01      	itttt	eq
 8002bec:	6819      	ldreq	r1, [r3, #0]
 8002bee:	685b      	ldreq	r3, [r3, #4]
 8002bf0:	1809      	addeq	r1, r1, r0
 8002bf2:	6021      	streq	r1, [r4, #0]
 8002bf4:	e7ed      	b.n	8002bd2 <_free_r+0x1e>
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	b10b      	cbz	r3, 8002c00 <_free_r+0x4c>
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	d9fa      	bls.n	8002bf6 <_free_r+0x42>
 8002c00:	6811      	ldr	r1, [r2, #0]
 8002c02:	1850      	adds	r0, r2, r1
 8002c04:	42a0      	cmp	r0, r4
 8002c06:	d10b      	bne.n	8002c20 <_free_r+0x6c>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	4401      	add	r1, r0
 8002c0c:	1850      	adds	r0, r2, r1
 8002c0e:	4283      	cmp	r3, r0
 8002c10:	6011      	str	r1, [r2, #0]
 8002c12:	d1e0      	bne.n	8002bd6 <_free_r+0x22>
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4408      	add	r0, r1
 8002c1a:	6010      	str	r0, [r2, #0]
 8002c1c:	6053      	str	r3, [r2, #4]
 8002c1e:	e7da      	b.n	8002bd6 <_free_r+0x22>
 8002c20:	d902      	bls.n	8002c28 <_free_r+0x74>
 8002c22:	230c      	movs	r3, #12
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	e7d6      	b.n	8002bd6 <_free_r+0x22>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	1821      	adds	r1, r4, r0
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	bf01      	itttt	eq
 8002c30:	6819      	ldreq	r1, [r3, #0]
 8002c32:	685b      	ldreq	r3, [r3, #4]
 8002c34:	1809      	addeq	r1, r1, r0
 8002c36:	6021      	streq	r1, [r4, #0]
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	6054      	str	r4, [r2, #4]
 8002c3c:	e7cb      	b.n	8002bd6 <_free_r+0x22>
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	200000f8 	.word	0x200000f8

08002c44 <_init>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr

08002c50 <_fini>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr
